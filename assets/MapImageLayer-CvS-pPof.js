const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-CIQYaowC.js","assets/utils-DS10Dx8j.js","assets/index-DalZQxea.js","assets/index-_2-vziSS.css","assets/originUtils-ByA56l8G.js","assets/jsonContext-7Kt-1pU7.js","assets/saveUtils-Cirmw4ZP.js"])))=>i.map(i=>d[i]);
import{dl as O,fA as _,dm as P,fb as F,fc as T,fd as L,fk as E,fe as M,dp as R,fB as j,_ as A,f as N,fx as b,fC as J,fD as U,cQ as q,fE as V,H as f,Y as k,cO as D,fF as H,b as x,bp as z,dn as G,D as a,F as n,fG as S,bl as W,ch as Z,cs as B,Z as C,fH as K}from"./index-DalZQxea.js";import{o as Q}from"./APIKeyMixin-Bo12B0OB.js";import{m as Y,h as X,l as $}from"./SublayersOwner-D9A2e4bO.js";import{l as ee}from"./ArcGISService-BdrqPqcc.js";import{y as te}from"./ExportImageParameters-CnRY0R_v.js";import{t as re}from"./imageBitmapUtils-ogogO2mJ.js";import{r as I}from"./sublayerUtils-CLrdRyiA.js";import{t as se}from"./versionUtils-DPaZBa3g.js";import"./QueryTask-usb2eIwp.js";import"./infoFor3D-dHKPbXlj.js";import"./executeForIds-CTjm2UeZ.js";import"./query-Du-7TXIe.js";import"./pbfQueryUtils-By0gJHqN.js";import"./pbf-CRLP2FQI.js";import"./memoryEstimations-8aoGHWgf.js";import"./OptimizedFeature-CIbaylOR.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-DYx6kMwl.js";import"./executeQueryJSON-C9m5EhWq.js";import"./featureConversionUtils-BmwuvCkf.js";import"./FeatureType-CRwoVfVt.js";import"./LayerFloorInfo-B8LVuSi2.js";import"./Relationship-DkvtEfb8.js";import"./serviceCapabilitiesUtils-DT_MjxK7.js";import"./floorFilterUtils-DZ5C6FQv.js";let s=class extends O(_(P(Y(X(ee(F(T(L(E(Q(M(G)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new te({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new R({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=j(async(r,l,t)=>{const{save:i,saveAs:o}=await A(()=>import("./mapImageLayerUtils-CIQYaowC.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(r){case 0:return i(this,l);case 1:return o(this,t,l)}})}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(N).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}get loaded(){return super.loaded}set portalItem(e){super.portalItem=e}writeSublayers(e,r,l,t){var y,g,v;if(!this.loaded||!e)return;const i=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray();let o=!1;const d=b(t.origin);let u;if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((v=(g=this.capabilities)==null?void 0:g.exportMap)!=null&&v.supportsDynamicLayers)){if(d===3){const p=this.createSublayersForOrigin("service").sublayers;o=I(i,p,2)}else if(d>3){const p=this.createSublayersForOrigin("portal-item");o=I(i,p.sublayers,b(p.origin)),u=p.originWithPartialOverrides}}const c=[],h={writeSublayerStructure:o,...t,minimumWritableOrigin:u};let m=o||this.hasVisibleLayersForOrigin(d);i.forEach(p=>{const w=p.write({},h);c.push(w),m=m||p.originOf("visible")==="user"}),c.some(p=>Object.keys(p).length>1)&&(r.layers=c),m&&(r.visibleLayers=i.filter(p=>p.visible).map(p=>p.id))}createExportImageParameters(e,r,l,t){const i=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=(t==null?void 0:t.scale)||J({extent:e,width:r})*i;const o=this._exportImageParameters.toJSON(),d=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},u=e==null?void 0:e.spatialReference,c=U(u);if(t!=null&&t.scale&&e){const m=e.width/r*(q(e==null?void 0:e.spatialReference)*V);o.dpi=t.scale/m}o.dpi*=i;const h={};if(t!=null&&t.timeExtent){const{start:m,end:y}=t.timeExtent.toJSON();h.time=m&&y&&m===y?""+m:`${m??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:c,imageSR:c,size:r+","+l,...o,...d,...h}}async fetchImage(e,r,l,t){const{data:i}=await this._fetchImage("image",e,r,l,t);return i}async fetchImageBitmap(e,r,l,t){const{data:i,url:o}=await this._fetchImage("blob",e,r,l,t);return re(i,o,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,r),{extent:t,fullExtent:i,timeExtent:o}=l,d=t||i;return{fullExtent:d&&D.fromJSON(d),timeExtent:o&&k.fromJSON({start:o[0],end:o[1]})}}loadAll(){return H(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(0,e)}async saveAs(e,r){return this._debouncedSaveOperations(1,r,e)}serviceSupportsSpatialReference(e){return se(this,e)}async _fetchImage(e,r,l,t,i){var u,c,h;const o={responseType:e,signal:(i==null?void 0:i.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,t,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},d=this.parsedUrl.path+"/export";if(((u=o.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&h.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:m}=await f(d,o);return{data:m,url:d}}catch(m){throw z(m)?m:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${d}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};a([n(S("dateFieldsTimeReference"))],s.prototype,"dateFieldsTimeZone",void 0),a([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),a([n()],s.prototype,"dpi",void 0),a([n()],s.prototype,"elevationInfo",void 0),a([n()],s.prototype,"gdbVersion",void 0),a([n()],s.prototype,"imageFormat",void 0),a([W("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),a([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),a([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),a([n()],s.prototype,"imageTransparency",void 0),a([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),a([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),a([n(S("preferredTimeReference"))],s.prototype,"preferredTimeZone",void 0),a([n()],s.prototype,"sourceJSON",void 0),a([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),a([Z("sublayers",{layers:{type:[$]},visibleLayers:{type:[K]}})],s.prototype,"writeSublayers",null),a([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],s.prototype,"listMode",void 0),a([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),a([n(B)],s.prototype,"url",void 0),s=a([C("esri.layers.MapImageLayer")],s);const Le=s;export{Le as default};
