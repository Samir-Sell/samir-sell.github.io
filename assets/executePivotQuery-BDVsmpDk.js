import{I as m,P as u,H as c,bt as p,c6 as f,c5 as y}from"./index-7LVg-iY6.js";import{t as v,r as P}from"./query-BAoHL1WT.js";import{v as g}from"./PivotQuery-BtV_lc4h.js";import"./pbfQueryUtils-Di9m46Vy.js";import"./pbf-Dt0FYVfe.js";import"./memoryEstimations-OaiSRTQo.js";import"./OptimizedFeature-B76Ba1pI.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-DlDf33Wr.js";function l(r){const t=P(r),o=t.outPivots;if(o!=null&&o.length){for(const i of o)i.pivotType==="Pivot"&&i.pivotParameters.outStatistic?i.pivotParameters.outStatistic=JSON.stringify(i.pivotParameters.outStatistic):i.pivotType==="Unpivot"&&(i.unPivotParameters.sourceFields=i.unPivotParameters.sourceFields.join(","));t.outPivots=JSON.stringify(o)}return t}async function S(r,t,o){return await q(r,t,o)}async function q(r,t,o={}){const i=typeof r=="string"?m(r):r,n=t.geometry?[t.geometry]:[],e=await u(n,null,{signal:o.signal}),a=e==null?void 0:e[0];a!=null&&((t=t.clone()).geometry=a);const s=v({...i.query,f:"json",...l(t)});return c(p(i.path,"queryPivot"),{...o,query:{...s,...o.query}})}async function F(r,t,o){const i=f(r),n={...o},{data:e}=await S(i,g.from(t),n);return y.fromJSON(e)}export{F as executePivotQuery};
