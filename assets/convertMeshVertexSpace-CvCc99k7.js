import{at as s,b as p,a2 as i}from"./index-MBf2dn39.js";import{c as m}from"./MeshVertexAttributes-BF_wQqia.js";import{e as a}from"./meshProperties-BrNWSC8G.js";import{q as l}from"./vertexSpaceConversion-Bc3lS1yU.js";import"./spatialReferenceEllipsoidUtils-mSxEU2KY.js";import"./computeTranslationToOriginAndRotation-BIyM3rah.js";import"./projectPointToVector-B6nSm9iu.js";import"./meshVertexSpaceUtils-z3D1YUNL.js";import"./MeshLocalVertexSpace-DcYRyZ9_.js";import"./vec3-0XSdc2yf.js";import"./BufferView-DbmJqxmi.js";import"./vec4-vZoWQHkE.js";async function E(r,e,t){await Promise.resolve(),s(t);const o=l(r,e,{useEllipsoid:t==null?void 0:t.useEllipsoid});if(!o)throw new p("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");return r.clone(a(void 0,{vertexAttributes:new m({...o,uv:i(r.vertexAttributes.uv),color:i(r.vertexAttributes.color)}),vertexSpace:e,transform:null}))}export{E as convertMeshVertexSpace};
