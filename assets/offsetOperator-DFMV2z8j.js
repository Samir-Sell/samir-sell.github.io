import{fL as f,cs as x}from"./index-MBf2dn39.js";import{w as d,j as y}from"./operatorOffset-C5DF4w_K.js";import{getSpatialReference as p,fromGeometry as G,toGeometry as u,fromGeometries as g}from"./jsonConverter-DRv1Kx8Q.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-BjpBdDSK.js";import"./Envelope2D-DXBkavsi.js";import"./Point2D-AUu76-L_.js";import"./Transformation2D-481oZy9q.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function F(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:c="round",unit:r}=n,o=p(e);r&&o&&(t=f(t,r,o));const m=G(e),i=m.getSpatialReference();return u(d(m.getGeometry(),i,t,l[c],a,s),i)}function M(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:c="round",unit:r}=n,o=p(e);r&&o&&(t=f(t,r,o));const[m,i]=g(e);return y(m,i,t,l[c],a,s).map(j=>u(j,i)).filter(x)}export{F as execute,M as executeMany};
