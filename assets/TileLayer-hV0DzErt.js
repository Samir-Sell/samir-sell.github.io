import{dl as _,dm as S,fb as b,fc as T,fd as w,fk as O,fe as $,dn as R,dp as W,f as A,N as v,I as U,H as c,fJ as D,fF as P,b as h,p as j,co as I,eE as L,ez as N,D as i,F as o,bl as B,ch as M,fK as k,cs as C,Z as J}from"./index-7LVg-iY6.js";import{o as q}from"./APIKeyMixin-DIEwp6PW.js";import{p as G}from"./ArcGISCachedService-CH8vRh2P.js";import{m as E,h as V,l as F}from"./SublayersOwner-DjtqXTe-.js";import{l as H}from"./ArcGISService-1aWK0Y4t.js";import{o as f}from"./imageBitmapUtils-BZ1CoYbo.js";import"./TileInfoTilemapCache-Byx59Ole.js";import"./TilemapCache-CPd28yRC.js";import"./memoryEstimations-OaiSRTQo.js";import"./QueryTask-18KCTxHr.js";import"./infoFor3D-dHKPbXlj.js";import"./executeForIds-DSbkFCqp.js";import"./query-BAoHL1WT.js";import"./pbfQueryUtils-Di9m46Vy.js";import"./pbf-Dt0FYVfe.js";import"./OptimizedFeature-B76Ba1pI.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-DlDf33Wr.js";import"./executeQueryJSON-C6d3RImu.js";import"./featureConversionUtils-CFKvofkg.js";import"./FeatureType-BcQWciWz.js";import"./LayerFloorInfo-DMRW5OiD.js";import"./Relationship-Dkzexu8o.js";import"./serviceCapabilitiesUtils-BiMJ8M3-.js";import"./sublayerUtils-CLrdRyiA.js";var y;const m=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let s=y=class extends _(S(E(G(V(b(T(H(w(O(q($(R)))))))))))){constructor(...e){super(...e),this.listMode="show",this.elevationInfo=new W({mode:"on-the-ground"}),this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(A).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}get hasAttributionData(){return super.hasAttributionData}readSpatialReference(e,r){var t;return(e=e||((t=r.tileInfo)==null?void 0:t.spatialReference))&&v.fromJSON(e)}writeSublayers(e,r,t,a){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray(),p=[],u={writeSublayerStructure:!1,...a};l.forEach(n=>{const d=n.write({},u);p.push(d)}),p.some(n=>Object.keys(n).length>1)&&(r.layers=p)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>U(r).path):null}fetchTile(e,r,t,a={}){const{signal:l}=a,p=this.getTileUrl(e,r,t),u={responseType:"image",signal:l,query:{...this.refreshParameters}};return c(p,u).then(n=>n.data)}async fetchImageBitmapTile(e,r,t,a={}){const{signal:l}=a;if(this.fetchTile!==y.prototype.fetchTile){const d=await this.fetchTile(e,r,t,a);return f(d,e,r,t,l)}const p=this.getTileUrl(e,r,t),u={responseType:"blob",signal:l,query:{...this.refreshParameters}},{data:n}=await c(p,u);return f(n,e,r,t,l)}getTileUrl(e,r,t){var u,n;const a=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=D({...(u=this.parsedUrl)==null?void 0:u.query,blankTile:!a&&null,...this.customParameters,token:this.apiKey}),p=this.tileServers;return`${p&&p.length?p[r%p.length]:(n=this.parsedUrl)==null?void 0:n.path}/tile/${e}/${r}/${t}${l?"?"+l:""}`}loadAll(){return P(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const a=j(this.parsedUrl.path);if(a!=null&&a.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!I(t))return this._fetchServerVersion(t,e).then(a=>{this.read({currentVersion:a})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!L(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return c(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(a=>{var l;if((l=a.data)!=null&&l.currentVersion)return a.data.currentVersion;throw new h("tile-layer:version-not-available","Server did not provide a version")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,a=m.length;t<a;t++)if(r=m[t],r.toLowerCase().includes(e))return N("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};i([o({readOnly:!0})],s.prototype,"attributionDataUrl",null),i([o({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([o({json:{read:!0,write:!0}})],s.prototype,"blendMode",void 0),i([o()],s.prototype,"elevationInfo",void 0),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([o({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([o({type:Boolean})],s.prototype,"resampling",void 0),i([o()],s.prototype,"sourceJSON",void 0),i([o({type:v})],s.prototype,"spatialReference",void 0),i([B("spatialReference",["spatialReference","tileInfo"])],s.prototype,"readSpatialReference",null),i([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],s.prototype,"path",void 0),i([o({readOnly:!0})],s.prototype,"sublayers",void 0),i([M("sublayers",{layers:{type:[F]}})],s.prototype,"writeSublayers",null),i([o({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([o()],s.prototype,"tileServers",null),i([k("tileServers")],s.prototype,"castTileServers",null),i([o({readOnly:!0,json:{read:!1}})],s.prototype,"type",void 0),i([o(C)],s.prototype,"url",void 0),s=y=i([J("esri.layers.TileLayer")],s);const g=Symbol("default-fetch-tile");s.prototype.fetchTile[g]=!0;const ge=s;export{ge as default};
