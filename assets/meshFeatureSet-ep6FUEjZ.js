import{m as y,bF as f,cO as S,c5 as d,N as g,j as b}from"./index-7LVg-iY6.js";import l from"./Mesh-rNYsN6Zt.js";import{n as w,i as F}from"./External-B0C-iyOH.js";import{s as M}from"./infoFor3D-dHKPbXlj.js";import{n as N,i as T}from"./meshFeatureAttributes-T2rys_Cc.js";import"./axisAngleDegrees-J6nlRbig.js";import"./quat-B0tpgzmi.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-Bqc4tzPv.js";import"./meshProperties-BrNWSC8G.js";import"./MeshLocalVertexSpace-T1vzY46g.js";import"./MeshTransform-DMjv0-Es.js";import"./MeshVertexAttributes-ByTkExdJ.js";import"./meshVertexSpaceUtils-CVbju_nQ.js";import"./triangulationUtils-CzrUNtbx.js";import"./earcut-D9gy186-.js";import"./Indices-4XmParll.js";import"./plane-BNp5RSXM.js";import"./vectorStacks-C4W7rb0Q.js";import"./deduplicate-CsrXgNgJ.js";import"./projectPointToVector-DB9mtevM.js";import"./vertexSpaceConversion-CF2V7qPo.js";import"./spatialReferenceEllipsoidUtils-YSk8guFm.js";import"./computeTranslationToOriginAndRotation-COM3Qr1z.js";import"./vec3-CyfSCT_v.js";import"./BufferView-k4yB9h9M.js";import"./vec4-CMCwkZSn.js";const $=()=>y.getLogger("esri.rest.support.meshFeatureSet");function ot(e,s,t){const r=t.features;t.features=[],delete t.geometryType;const o=d.fromJSON(t);if(o.geometryType="mesh",!t.assetMaps)return o;const n=O(s,t.assetMaps),i=e.sourceSpatialReference??g.WGS84,m=t.globalIdFieldName,{outFields:a}=e,c=a!=null&&a.length>0?v(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=x(u,m,i,s,n);o.features.push(new b({geometry:p,attributes:c(u)}))}return o}function v(e){return({attributes:s})=>{if(!s)return{};if(!e)return s;for(const t in s)e.has(t)||delete s[t];return s}}function x(e,s,t,r,o){const n=e.attributes[s],i=o.get(n);if(i==null||!e.geometry)return null;const m=N(e.attributes,t,r.transformFieldRoles),a=S.fromJSON(e.geometry);a.spatialReference=t;const c=T(e.attributes,r.transformFieldRoles),u=t.isGeographic?"local":"georeferenced",p=R(i);return p?l.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):l.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}function O(e,s){const t=new Map;for(const r of s){const o=r.parentGlobalId;if(o==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=M(i,e.supportedFormats);if(!p){$().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const h=f(t,o,()=>({files:new Map}));f(h.files,n,()=>({name:n,type:i,mimeType:p,status:E(c),parts:[]})).parts[u]={hash:m,url:a}}return t}function R(e){const s=Array.from(e.files.values()),t=new Array;for(const r of s){if(r.status!==2)return null;const o=new Array;for(const n of r.parts){if(!n)return null;o.push(new w(n.url,n.hash))}t.push(new F(r.name,r.mimeType,o))}return{type:"service",assets:t}}function E(e){switch(e){case"COMPLETED":case"SUBMITTED":return 2;case"INPROGRESS":return 1;default:return 0}}export{O as assetMapFromAssetMapsJSON,x as extractMesh,ot as meshFeatureSetFromJSON};
