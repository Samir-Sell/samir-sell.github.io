import{Z as S,aj as x,a1 as y,cO as c,az as h,j as O}from"./index-MBf2dn39.js";import{c as i}from"./PixelBlock-Dc6PxXka.js";import{k,R as N,O as g,y as B}from"./RasterSymbolizer-BSYGCckg.js";import{f as P,j as J,u as w,W as z,E as b,T as v,N as T,D,a as j}from"./vectorFieldUtils-D-BW2pPN.js";import{T as F}from"./rasterFunctionHelper-B70uwFpA.js";import{j as I,r as L}from"./rasterProjectionHelper-D8_xYHp-.js";import{t as $,u as E,n as R}from"./PolynomialTransform-Bz121gue.js";import{c as G}from"./dataUtils-CtyuARAx.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./colorUtils-CkAZgRni.js";import"./clipUtils-D_rCC_vF.js";var p;let f=p=class extends ${constructor(){super(...arguments),this.type="identity"}clone(){return new p}};S([x({IdentityXform:"identity"})],f.prototype,"type",void 0),f=p=S([y("esri.layers.support.rasterTransforms.IdentityTransform")],f);const X={GCSShiftXform:R,IdentityXform:f,PolynomialXform:E};function A(n){if(!(n==null?void 0:n.type))return null;const r=X[n==null?void 0:n.type];if(r){const e=new r;return e.read(n),e}return null}function a(n){if(!n)return{result:null,transferList:[]};const{pixelBlock:t,transferList:r}=n.getTransferableObject();return{result:t,transferList:r}}class Y{convertVectorFieldData(t){const r=i.fromJSON(t.pixelBlock),e=a(P(r,t.type));return Promise.resolve(e)}convertPixelBlockToFeatures(t){const r=J({pixelBlock:i.fromJSON(t.pixelBlock),extent:c.fromJSON(t.extent),fieldNames:t.fieldNames,skipFactor:t.skipFactor,skipSpatialReference:!0,pixelIdOffset:t.pixelIdOffset,imageRowSize:t.imageRowSize});return Promise.resolve(r)}computeStatisticsHistograms(t){const r=i.fromJSON(t.pixelBlock),e=k(r,{histogramSize:t.histogramSize,includeSkewnessKurtosis:t.includeSkewnessKurtosis});return Promise.resolve(e)}async decode(t){return a(await N(t.data,t.options))}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?c.fromJSON(t.extent):null;const r=a(this.symbolizer.symbolize(t));return Promise.resolve(r)}highlightPixels(t){const r=i.fromJSON(t.pixelBlock),e=i.fromJSON(t.renderedPixelBlock);return w(r,e,t.highlightOptions),Promise.resolve(e.toJSON())}async updateSymbolizer(t){var r;this.symbolizer=g.fromJSON(t.symbolizerJSON),t.histograms&&((r=this.symbolizer)==null?void 0:r.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=F(t.rasterFunctionJSON)}async process(t){var r;return a(this.rasterFunction.process({extent:c.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(e=>e!=null?i.fromJSON(e):null),primaryPixelSizes:(r=t.primaryPixelSizes)==null?void 0:r.map(e=>e!=null?h.fromJSON(e):null),primaryRasterIds:t.primaryRasterIds}))}stretch(t){const r=a(this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams));return Promise.resolve(r)}estimateStatisticsHistograms(t){const r=B(i.fromJSON(t.srcPixelBlock));return Promise.resolve(r)}split(t){const r=z(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1),e=[];let s;return r&&(s=new Map,r.forEach((o,l)=>{if(o){const{pixelBlock:u,transferList:m}=o.getTransferableObject();s.set(l,u),m.forEach(d=>{e.includes(d)||e.push(d)})}})),Promise.resolve({result:s,transferList:e})}clipTile(t){const r=i.fromJSON(t.pixelBlock),e=a(b({...t,pixelBlock:r}));return Promise.resolve(e)}async mosaicAndTransform(t){const r=t.srcPixelBlocks.map(m=>m?new i(m):null),e=v(r,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let s,o=e;t.coefs&&(o=T(e,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(s=D(t.destDimension,t.gcsGrid),o=j(o,t.isUV?"vector-uv":"vector-magdir",s));const{result:l,transferList:u}=a(o);return{result:{pixelBlock:l,localNorthDirections:s},transferList:u}}async createFlowMesh(t,r){const e={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:s,indexData:o}=await G(t.meshType,t.simulationSettings,e,r.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(t){var l;const r=c.fromJSON(t.projectedExtent),e=c.fromJSON(t.srcBufferExtent);let s=null;(l=t.datumTransformationSteps)!=null&&l.length&&(s=new O({steps:t.datumTransformationSteps})),await I();const o=t.rasterTransform?A(t.rasterTransform):null;return L({...t,projectedExtent:r,srcBufferExtent:e,datumTransformation:s,rasterTransform:o})}}export{Y as default};
