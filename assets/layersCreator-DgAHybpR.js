import{k as I,a3 as M}from"./index-MBf2dn39.js";import{e as b}from"./loadUtils-BTLjzLBp.js";import{a as n}from"./lazyLayerLoader-DnfurXnu.js";import{selectLayerClassPath as A}from"./portalLayers-BAQWbDiD.js";import{t as w}from"./styleUtils-B3m3e1PV.js";import"./fetchService-vucHBN0E.js";import"./associatedFeatureServiceUtils-Co2c9c7J.js";function v(e){return u(e,"notes")}function C(e){return u(e,"markup")}function h(e){return u(e,"route")}function u(e,a){return!(!e.layerType||e.layerType!=="ArcGISFeatureLayer")&&e.featureCollectionType===a}async function W(e,a,r){if(!a)return;const y=a.map(t=>E(t,r)),i=await Promise.allSettled(y);for(const t of i)t.status==="rejected"||t.value&&e.add(t.value)}const F={ArcGISDimensionLayer:"DimensionLayer",ArcGISFeatureLayer:"FeatureLayer",ArcGISImageServiceLayer:"ImageryLayer",ArcGISMapServiceLayer:"MapImageLayer",ArcGISSceneServiceLayer:"SceneLayer",ArcGISTiledElevationServiceLayer:"ElevationLayer",ArcGISTiledImageServiceLayer:"ImageryTileLayer",ArcGISTiledMapServiceLayer:"TileLayer",BuildingSceneLayer:"BuildingSceneLayer",CatalogLayer:"CatalogLayer",CSV:"CSVLayer",DefaultTileLayer:"TileLayer",GaussianSplatLayer:"GaussianSplatLayer",GeoJSON:"GeoJSONLayer",GroupLayer:"GroupLayer",IntegratedMesh3DTilesLayer:"IntegratedMesh3DTilesLayer",Object3DTilesLayer:"UnsupportedLayer",IntegratedMeshLayer:"IntegratedMeshLayer",KML:"KMLLayer",LineOfSightLayer:"LineOfSightLayer",MediaLayer:"MediaLayer",OGCFeatureLayer:"OGCFeatureLayer",OrientedImageryLayer:"OrientedImageryLayer",PointCloudLayer:"PointCloudLayer",RasterDataLayer:"UnsupportedLayer",VectorTileLayer:"VectorTileLayer",ViewshedLayer:"ViewshedLayer",Voxel:"VoxelLayer",WCS:"WCSLayer",WFS:"WFSLayer",WMS:"WMSLayer",WebTiledLayer:"WebTileLayer"},O={ArcGISTiledElevationServiceLayer:"ElevationLayer",DefaultTileLayer:"ElevationLayer",RasterDataElevationLayer:"UnsupportedLayer"},V={ArcGISFeatureLayer:"FeatureLayer"},k={ArcGISImageServiceLayer:"UnsupportedLayer",ArcGISMapServiceLayer:"UnsupportedLayer",ArcGISSceneServiceLayer:"SceneLayer",ArcGISTiledImageServiceLayer:"ImageryTileLayer",ArcGISTiledMapServiceLayer:"TileLayer",DefaultTileLayer:"TileLayer",OpenStreetMap:"OpenStreetMapLayer",VectorTileLayer:"VectorTileLayer",WCS:"UnsupportedLayer",WMS:"UnsupportedLayer",WebTiledLayer:"WebTileLayer"},D={IntegratedMesh3DTilesLayer:"IntegratedMesh3DTilesLayer"},g={ArcGISAnnotationLayer:"UnsupportedLayer",ArcGISDimensionLayer:"UnsupportedLayer",ArcGISFeatureLayer:"FeatureLayer",ArcGISImageServiceLayer:"ImageryLayer",ArcGISImageServiceVectorLayer:"ImageryLayer",ArcGISMapServiceLayer:"MapImageLayer",ArcGISStreamLayer:"StreamLayer",ArcGISTiledImageServiceLayer:"ImageryTileLayer",ArcGISTiledMapServiceLayer:"TileLayer",ArcGISVideoLayer:"VideoLayer",BingMapsAerial:"BingMapsLayer",BingMapsHybrid:"BingMapsLayer",BingMapsRoad:"BingMapsLayer",CatalogLayer:"CatalogLayer",CSV:"CSVLayer",DefaultTileLayer:"TileLayer",GeoJSON:"GeoJSONLayer",GeoRSS:"GeoRSSLayer",GroupLayer:"GroupLayer",KML:"KMLLayer",KnowledgeGraphLayer:"KnowledgeGraphLayer",MediaLayer:"MediaLayer",OGCFeatureLayer:"OGCFeatureLayer",OrientedImageryLayer:"OrientedImageryLayer",SubtypeGroupLayer:"SubtypeGroupLayer",VectorTileLayer:"VectorTileLayer",WCS:"WCSLayer",WFS:"WFSLayer",WMS:"WMSLayer",WebTiledLayer:"WebTileLayer"},T={ArcGISFeatureLayer:"FeatureLayer",SubtypeGroupTable:"SubtypeGroupLayer"},m={ArcGISImageServiceLayer:"ImageryLayer",ArcGISImageServiceVectorLayer:"ImageryLayer",ArcGISMapServiceLayer:"MapImageLayer",ArcGISTiledImageServiceLayer:"ImageryTileLayer",ArcGISTiledMapServiceLayer:"TileLayer",BingMapsAerial:"BingMapsLayer",BingMapsHybrid:"BingMapsLayer",BingMapsRoad:"BingMapsLayer",DefaultTileLayer:"TileLayer",OpenStreetMap:"OpenStreetMapLayer",VectorTileLayer:"VectorTileLayer",WCS:"WCSLayer",WMS:"WMSLayer",WebTiledLayer:"WebTileLayer"},B={...g,LinkChartLayer:"LinkChartLayer"},U={...T},x={...m};async function E(e,a){return R(await K(e,a),e,a)}async function R(e,a,r){const y=new e;return y.read(a,r.context),y.type==="group"&&(a.layerType==="GroupLayer"?await J(y,a,r):S(a)?P(y,a,r.context):G(a)&&await j(y,a,r.context)),await w(y,r.context),y}async function K(e,a){var l,o;const r=a.context,y=N(r);let i=e.layerType||e.type;!i&&(a!=null&&a.defaultLayerType)&&(i=a.defaultLayerType);const t=y[i];let L=t?n[t]:n.UnknownLayer;if(S(e)){const s=r==null?void 0:r.portal;if(e.itemId){const c=new I({id:e.itemId,portal:s});await c.load();const p=(await A(c,new b)).className||"UnknownLayer";L=n[p]}}else i==="ArcGISFeatureLayer"?v(e)||C(e)?L=n.MapNotesLayer:h(e)?L=n.RouteLayer:G(e)&&(L=n.GroupLayer):(l=e.wmtsInfo)!=null&&l.url&&e.wmtsInfo.layerIdentifier?L=n.WMTSLayer:i==="WFS"&&((o=e.wfsInfo)==null?void 0:o.version)!=="2.0.0"&&(L=n.UnsupportedLayer);return L()}function G(e){var a,r;return e.layerType!=="ArcGISFeatureLayer"||S(e)?!1:(((r=(a=e.featureCollection)==null?void 0:a.layers)==null?void 0:r.length)??0)>1}function S(e){return e.type==="Feature Collection"}function N(e){let a;switch(e.origin){case"web-scene":switch(e.layerContainerType){case"basemap-base-layers":a=k;break;case"basemap-ground-layers":a=D;break;case"ground":a=O;break;case"tables":a=V;break;default:a=F}break;case"link-chart":switch(e.layerContainerType){case"basemap-base-layers":a=x;break;case"tables":a=U;break;default:a=B}break;default:switch(e.layerContainerType){case"basemap-base-layers":a=m;break;case"tables":a=T;break;default:a=g}}return a}async function J(e,a,r){const y=new M,i=W(y,Array.isArray(a.layers)?a.layers:[],r);try{try{if(await i,e.type==="group")return e.layers.addMany(y),e}catch(t){e.destroy();for(const L of y)L.destroy();throw t}}catch(t){throw t}}function P(e,a,r){a.itemId&&(e.portalItem=new I({id:a.itemId,portal:r==null?void 0:r.portal}),e.when(()=>{var i,t;const y=L=>{var s,c;const l=L.layerId;f(L,e,a,l,r);const o=(c=(s=a.featureCollection)==null?void 0:s.layers)==null?void 0:c[l];o&&L.read(o,r)};(i=e.layers)==null||i.forEach(y),(t=e.tables)==null||t.forEach(y)}))}async function j(e,a,r){var o;const y=n.FeatureLayer,i=await y(),t=a.featureCollection,L=t==null?void 0:t.showLegend,l=(o=t==null?void 0:t.layers)==null?void 0:o.map((s,c)=>{const p=new i;p.read(s,r);const d={...r,ignoreDefaults:!0};return f(p,e,a,c,d),L!=null&&p.read({showLegend:L},d),p});e.layers.addMany(l??[])}function f(e,a,r,y,i){var t;e.read({id:`${a.id}-sublayer-${y}`,visibility:((t=r.visibleLayers)==null?void 0:t.includes(y))??!0},i)}export{J as populateGroupLayer,W as populateOperationalLayers};
