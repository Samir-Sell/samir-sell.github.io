import{cp as W,cP as E,gv as U,ax as F,gw as X,o as Y,bi as _,gx as D,gy as G,Z as o,a0 as p,a1 as O}from"./index-MBf2dn39.js";import{l as H,u as I,t as N}from"./gridUtils-BbMKu9KN.js";import{l as g,d as T,f as Z}from"./hitTestSelectUtils-10aaYjxP.js";import{i as L,n as k}from"./SketchViewModel-CRnEH5k2.js";import"./geodesicUtils-Cv-uNZC_.js";import"./projectVectorToVector-BNBlDXwZ.js";import"./projectPointToVector-B6nSm9iu.js";import"./plane-DE-0I0cS.js";import"./vectorStacks-F901fm2H.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-CE7i_KZR.js";import"./elevationInfoUtils-l3tH7G6t.js";import"./quantityUtils-DzEnXnWn.js";import"./spatialReferenceEllipsoidUtils-mSxEU2KY.js";import"./GraphicsLayer-Ba0J3wFG.js";import"./geodeticLengthOperator-B4nqKAmY.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-Cssjwt09.js";import"./lineSegment-BybilsXP.js";let s=class extends W{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var e;return(e=this.grid)!=null&&e.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){var e;return E(((e=this.grid)==null?void 0:e.rotation)??0)}get gridCenter(){var t;const{spatialReference:e,grid:i}=this;if(!i||!e||!U(i.center.spatialReference,e))return null;try{const r=F(i.center,e),n=e.isWrappable&&((t=this.view)==null?void 0:t.center)!=null?X(r.x,this.view.center.x,e):r.x;return g(n,r.y,r.z)}catch(r){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:i}=this;if(!i||!e)return 1;const{majorLineInterval:t,dynamicScaling:r}=i;return t<1?null:H(t,e,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?_(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*D(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?I(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:i}=this;return i&&e?e/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,i,t){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=t.feature)!=null&&u.attributes&&T in t.feature.attributes)return[];const a=t.coordinateHelper.arrayToPoint(e),l=r.distance*(t.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(e,i){const t=[],{grid:r,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:u,viewMetersPerSRUnit:f,offsetScaleFactor:m,spatialReference:h,gridMetersPerStride:b,pixelsPerStride:C}=this;if(!(r&&u&&f&&l&&h&&m&&b&&C)||!r.dynamicScaling&&C<N||!U(e.spatialReference,h))return t;const y=F(e,h),z=g(y.x,y.y,y.z),c=S(z,-a,l,-n),P=b/f*m,d=q(c,P,l),{shouldSnapX:v,shouldSnapY:w}=A(d,c,i,u,f);if(!v&&!w)return[];const V=g((v?d:c)[0],(w?d:c)[1]),M=S(V,a,l,n),$=S(d,a,l,n);if(w){const R=j(d,c,P,"y"),x=S(R,a,l,n);t.push(new L({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=j(d,c,P,"x"),x=S(R,a,l,n);t.push(new L({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&w&&t.push(new k(M,t[0],t[1],!1)),t}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([O("esri.views.interactive.snapping.GridSnappingEngine")],s);const S=(e,i,t,r)=>{const n=Z(e[0],e[1],e[2]);return G(n,G(n,n,t,i),t,r)},q=(e,i,t)=>{const r=(e[0]-t[0])/i,n=(e[1]-t[1])/i,a=Math.trunc(r),l=Math.trunc(n),u=Math.round(r%1),f=Math.round(n%1),m=t[0]+(a+u)*i,h=t[1]+(l+f)*i;return g(m,h)},A=(e,i,t,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(e[0]-i[0])/r,l=(e[1]-i[1])/r;return{shouldSnapX:Math.abs(a*n)<t,shouldSnapY:Math.abs(l*n)<t}},j=(e,i,t,r)=>{if(r==="y"){const a=i[0]>e[0]?1:-1;return g(e[0]+t*a,e[1])}const n=i[1]>e[1]?1:-1;return g(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
