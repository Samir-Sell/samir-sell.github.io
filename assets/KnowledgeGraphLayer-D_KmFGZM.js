import{dl as T,dm as D,fk as _,fb as L,fc as S,fd as v,fe as k,dn as N,O as f,dc as C,ft as A,f as I,b as p,fw as G,m as c,bF as w,fs as E,fx as O,fy as M,fz as R,e_ as x,bt as $,D as o,F as l,bl as K,ch as F,cs as j,Z as z}from"./index-DalZQxea.js";import{N as g,L as b,a as P,f as U,F as H,w as B}from"./KnowledgeGraphSublayer-iWA1o7pp.js";import{l as V}from"./ArcGISService-BdrqPqcc.js";import{u as Y}from"./knowledgeGraphService-CS_xOnM1.js";import"./OptimizedFeature-CIbaylOR.js";import"./memoryEstimations-8aoGHWgf.js";import"./constants-SxxbBSOD.js";import"./featureConversionUtils-BmwuvCkf.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./GraphicsLayer-C1pBo3gS.js";import"./Relationship-DWTtdsl7.js";import"./FeatureStore-D9Ckv2F8.js";import"./BoundsStore-DbxyL9pF.js";import"./PooledRBush-nC3Mk1Zg.js";import"./timeSupport-DE744COr.js";import"./queryUtils-C0kkxnUU.js";import"./optimizedFeatureQueryEngineAdapter-DoNnCNQC.js";import"./QueryEngine-DIyR0L1R.js";import"./WhereClauseCache-CKxzw6YW.js";import"./WhereClause-D55gKuCF.js";import"./quantizationUtils-Cg8aT734.js";import"./utils-s78bCeR-.js";import"./utils-CFjJWc1n.js";import"./utils-DBe9O2nJ.js";import"./ClassBreaksDefinition-D7Y6k7cL.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-UypphbZw.js";import"./FormTemplate-D-ZhCRwq.js";import"./utils-B3FA2Y99.js";import"./cimSymbolUtils-tS__2F1D.js";import"./networkEnums-oYhhicWM.js";import"./GPMessage-B-rJ75Ea.js";let n=class extends T(D(_(V(L(S(v(k(N)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(f.ofType(g)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(f.ofType(g)),this.type="knowledge-graph",this.url=null,this.addHandles(C(()=>this.layers.concat(this.tables),(i,t)=>this._handleSublayersChange(i,t),A))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){I(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await b(this)}async _fetchMetadata(){if(!this.url)throw new p("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await Y(this.url);this.knowledgeGraph=e,this._forEachGraphType(i=>{i.name&&this._graphTypeLookup.set(i.name,i)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===7?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new P({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await U(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,G(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if((i==null?void 0:i.size)>0)i.forEach((t,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return c.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(c.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))});else if(!e.generateAllSublayers)throw new p("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){var s,r;let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t==null?void 0:t.namedTypeDefinitions;!t||t.generateAllSublayers?(e=((s=this.knowledgeGraph.dataModel)==null?void 0:s.entityTypes)??[],i=((r=this.knowledgeGraph.dataModel)==null?void 0:r.relationshipTypes)??[]):a&&a.size>0&&a.forEach((d,y)=>{const h=this._graphTypeLookup.get(y);switch(h==null?void 0:h.type){case"relationship":i.push(h);break;case"entity":e.push(h)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){var i,t;[...((i=this.knowledgeGraph.dataModel)==null?void 0:i.entityTypes)??[],...((t=this.knowledgeGraph.dataModel)==null?void 0:t.relationshipTypes)??[]].forEach(a=>{e(a)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(this.layers.concat(this.tables).some(s=>s.objectType.name===a.typeName)===!1&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),w(this.sublayerIdsCache,a.typeName,()=>new Set).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const s=this._graphTypeLookup.get(a);s&&(this._addSublayer(s),s.type==="entity"?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await b(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach(a=>{const s=this._createSublayer(a);t(s)&&i.push(s),this._updateSublayerCaches(a)})}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new g({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach(t=>{t.parentCompositeLayer=this;const a=e.find(s=>s.type===t.graphType&&s.name===t.graphTypeName);a&&(t.objectType=a,this._updateSublayerCaches(a))})}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(Z(this.inclusionModeDefinition).then(s=>{const r=q(a);e[i]=r.itemRelativeUrl,t.toAdd.push({resource:r,content:{type:"blob",blob:s},compress:!1,finish:d=>{this.definitionSetMap=d.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach(t=>{t.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(t=>{t.parent=this}),this.addHandles([e.on("after-add",({item:t})=>{t.parent=this}),e.on("after-remove",({item:t})=>{t.parent=null})],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=3&&e<7}readDefinitionSetMap(e,i,t){return E(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a==null?void 0:a.portalItem,r=a==null?void 0:a.resources,d=O(a==null?void 0:a.origin);if(!s||!r||d==null)return void(e&&(i[t]=M(e,a)));const{inclusionModeDefinition:y}=this;if(!y||this._displaysAllRecords(y))return void(this.definitionSetMap=null);const h=this.originIdOf("inclusionModeDefinition");if(h===7||this._namedTypesModified||d<h)this._saveUrlAsNewResource(i,t,r,s);else if(d===h&&e){const m=M(e,a);R(m)?this._saveUrlAsNewResource(i,t,r,s):i[t]=m}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):c.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}get sublayerCapabilities(){return H(this.knowledgeGraph)}loadLayerAssumingLocalCache(){var i,t;const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===0?this.originIdOf("layers")===0?this._createSublayers(e,this.layers,a=>!!a.geometryType):this._updateSublayers(e,this.layers):this.layers=new f,this.tables.length||this.originIdOf("layers")===0?this.originIdOf("tables")===0?this._createSublayers(e,this.tables,a=>!a.geometryType):this._updateSublayers(e,this.tables):this.tables=new f,(t=(i=this.dataManager.inclusionModeDefinition)==null?void 0:i.namedTypeDefinitions)==null||t.forEach((a,s)=>{var d;const r=w(this.sublayerIdsCache,s,()=>new Set);(d=a.members)==null||d.forEach(y=>{r.add(y.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),w(this.sublayerIdsCache,e,()=>new Set);const t=this._addSublayer(i);return i.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await b(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);i!=null&&i.useAllData?c.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else c.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||c.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&c.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())w(this.sublayerIdsCache,e,()=>new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){var t,a,s,r,d,y,h,m;await this.load();const i=[];for(const u of e)((s=(a=(t=this.dataManager.inclusionModeDefinition)==null?void 0:t.namedTypeDefinitions)==null?void 0:a.get(u.typeName))==null?void 0:s.useAllData)===!1&&((h=(y=(d=(r=this.dataManager.inclusionModeDefinition)==null?void 0:r.namedTypeDefinitions)==null?void 0:d.get(u.typeName))==null?void 0:y.members)!=null&&h.has(u.id))&&i.push(u);this.dataManager.removeFromLayer(i);for(const u of i)(m=this.sublayerIdsCache.get(u.typeName))==null||m.delete(u.id);return this._refreshNamedTypes(),i}};o([l()],n.prototype,"dataManager",void 0),o([l({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],n.prototype,"definitionSetMap",void 0),o([K("definitionSetMap")],n.prototype,"readDefinitionSetMap",null),o([F("definitionSetMap")],n.prototype,"writeDefinitionSetMap",null),o([l()],n.prototype,"inclusionModeDefinition",null),o([l()],n.prototype,"knowledgeGraph",void 0),o([l({type:f.ofType(g),json:{write:{ignoreOrigin:!0}}})],n.prototype,"layers",void 0),o([l()],n.prototype,"memberEntityTypes",void 0),o([l()],n.prototype,"memberRelationshipTypes",void 0),o([l({type:["KnowledgeGraphLayer"]})],n.prototype,"operationalLayerType",void 0),o([l()],n.prototype,"sublayerCapabilities",null),o([l()],n.prototype,"sublayerIdsCache",void 0),o([l({type:f.ofType(g),json:{write:{ignoreOrigin:!0}}})],n.prototype,"tables",void 0),o([l({json:{read:!1}})],n.prototype,"type",void 0),o([l(j)],n.prototype,"url",void 0),n=o([z("esri.layers.KnowledgeGraphLayer")],n);const Ne=n;async function Z(e){const i=await B(e);return new Blob([i],{type:"application/x-protobuf"})}function q(e){const i=`definitionSetMap-${x()}.dat`,t=$("knowledgeGraphLayer",i);return e.resourceFromPath(t)}export{Ne as default};
