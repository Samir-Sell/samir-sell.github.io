import{cv as w,cw as y,cx as I,cy as T,cz as V,br as u,T as v,bp as n,cA as f,bo as H,m as C,D as m,F as d,Z as b}from"./index-DalZQxea.js";import"./rasterizingUtils-B16sHWiq.js";import"./CIMSymbolHelper-hICFpEiq.js";import"./OverrideHelper-Duuf_CmD.js";import"./Container-DgBtZZgc.js";import"./WGLContainer-BtqWFZDN.js";import"./ProgramTemplate-D1A-fbwY.js";import"./BufferObject-PzUDq_hb.js";import"./Utils-D70pyQOT.js";import"./GridShader--W6FSCJh.js";import"./pbf-CRLP2FQI.js";import"./FramebufferObject-vVgCufsi.js";import"./FeatureCommandQueue-B3B2gwM3.js";import"./UpdateTracking2D-B8KUrR17.js";import"./TexturedLineMeshWriter-3-9_ObyG.js";import"./renderState-CKc66y4x.js";import"./glsl-B5bJgrnA.js";import"./testSVGPremultipliedAlpha-b8O7MjA3.js";import{O as q}from"./GraphicsView2D-Ctn_ucfv.js";import"./earcut-D9gy186-.js";import"./vec3f32-WCVSSNPR.js";import{r as U,o as p,n as _}from"./imageUtils-LjKI7OZ4.js";import{b as P}from"./LayerView2D-Bx5qWtjs.js";import{o as Q}from"./HighlightGraphicContainer-B5GeumLV.js";import{d as S}from"./LayerView-D0BmErtM.js";import{i as G}from"./RefreshableLayerView-CZg3E8y3.js";import{S as L,P as F,i as k}from"./MapServiceLayerViewHelper-lGCxTyim.js";import{r as z}from"./drapedUtils-DSmjGbg-.js";import{r as A}from"./highlightOptionsUtils-BseeS75W.js";import"./BidiEngine-BvER9tXK.js";import"./labelPoint-Cxwr-WO2.js";import"./OptimizedFeature-CIbaylOR.js";import"./memoryEstimations-8aoGHWgf.js";import"./GeometryUtils-BvKSmYie.js";import"./Rect-CUzevAry.js";import"./BoundingBox-D30L3Gvt.js";import"./colorUtils-CuYxSYRB.js";import"./callExpressionWithFeature-Cb2IvCSY.js";import"./quantizationUtils-Cg8aT734.js";import"./VertexArrayObject-DtjwKQ5C.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./VertexBuffer-C3yWAO3V.js";import"./config-BOD8--da.js";import"./featureConversionUtils-BmwuvCkf.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./GraphShaderModule-DHLQD9pP.js";import"./ShaderBuilder-BqcRlQpm.js";import"./utils-Bj8iihfG.js";import"./constants-BBnGEY1d.js";import"./CircularArray-CujHzHWW.js";import"./SymbolFader-BONkc54A.js";import"./constants-BHYAGdRm.js";import"./streamLayerUtils-DFlbJ4P1.js";import"./QueueProcessor-DZuEN6N2.js";import"./TurboLine-Bds0VfyR.js";import"./AttributeStore-Dh2D76Aq.js";import"./FeatureStoreQueryAdapter-DMZkEvLi.js";import"./queryUtils-C0kkxnUU.js";import"./timeSupport-DE744COr.js";import"./FeatureMetadata-CJzVmzzu.js";import"./normalizeUtilsSync-DLB-7fxp.js";import"./dehydratedFeatures-DhqaXmFY.js";import"./BitmapTechnique-CF8U0qNi.js";import"./bitmapUtils-DJ8eIuzC.js";import"./TileContainer-BT6lmSqg.js";import"./layerViewUtils-BaP6ELkx.js";import"./AGraphicContainer-afUsb7gn.js";import"./TechniqueInstance-D6f_LGy1.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./sublayerUtils-CLrdRyiA.js";import"./popupUtils-sIRZgpID.js";const E=[0,0];let l=class extends G(U(P(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,h)=>this.fetchTile(e,h),scheduler:this.scheduler,priority:T.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),L(this,this.layer)){const e=this._highlightView=new q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new Q(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new F({createFetchPopupFeaturesQueryGeometry:(h,r)=>z(h,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:({graphic:h,property:r})=>e.graphicUpdateHandler({graphic:h,property:r}),layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i):[]}highlight(t,i){const e=k(t);if(e.length===0)return u();const h=A(i);return this._addHighlightGraphics(e,h),u(()=>!this.destroyed&&this._removeHighlightGraphics(e,h))}_processHighlight(){var i;const t=this._getHighlights();(i=this._highlightView)==null||i.setHighlight(t)}_addHighlightGraphics(t,i){this._highlightGraphics.addMany(t),this._addHighlights(t.map(e=>e.uid),i)}_removeHighlightGraphics(t,i){this._highlightGraphics.removeMany(t),this._removeHighlights(t.map(e=>e.uid),i)}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return v((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(E,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){return this.tilemapCache?this._fetchTileWithTilemapCache(t,i):this._fetchTileWithoutTilemapCache(t,i)}async _fetchTileWithoutTilemapCache(t,i={}){const{signal:e,resamplingLevel:h=0}=i;try{return await this._fetchImage(t,e)}catch(r){if(n(r))throw r;if(!this.resampling)return p(this._tileInfoView.tileInfo.size);if(h<3){const s=this._tileInfoView.getTileParentId(t.id);if(s){const a=new f(s),o=await this._fetchTileWithoutTilemapCache(a,{...i,resamplingLevel:h+1});return _(this._tileInfoView,o,a,t)}}return p(this._tileInfoView.tileInfo.size)}}async _fetchTileWithTilemapCache(t,i={}){const e=this.tilemapCache,{signal:h,resamplingLevel:r=0}=i,s=new f(0,0,0,0);let a,o=null;try{if(o=await e.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:h}),!this.resampling&&s.level!==t.level)return await H(i),p(this._tileInfoView.tileInfo.size);a=await this._fetchImage(s,h)}catch(c){if(n(c))throw c;if(this.resampling&&o==="unknown"&&r<3){const g=this._tileInfoView.getTileParentId(t.id);if(g){s.set(g);try{a=await this._fetchTileWithTilemapCache(s,{...i,resamplingLevel:r+1})}catch{}}}}return a?this.resampling?_(this._tileInfoView,a,s,t):a:p(this._tileInfoView.tileInfo.size)}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){n(i)||C.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};m([d()],l.prototype,"resampling",null),m([d()],l.prototype,"tilemapCache",null),l=m([b("esri.views.2d.layers.TileLayerView2D")],l);const hi=l;export{hi as default};
