import{j4 as u,j5 as b,dc as p,dd as a,cb as S,a3 as V,d7 as $,d6 as _,j6 as l,Z as v,a1 as T}from"./index-Cv0-fPI4.js";import{b as M}from"./LayerView2D-C0MBXbZt.js";import{i as C}from"./GraphicContainer-D0YM5z_L.js";import{O}from"./GraphicsView2D-Cs1_npVk.js";import{d as j}from"./LayerView-Wy01GXOV.js";import"./Container-vfgzZutF.js";import"./layerViewUtils-CwJdb8aR.js";import"./AGraphicContainer-DWWnyE2L.js";import"./TechniqueInstance-C2A0yhEN.js";import"./memoryEstimations-djtQljaD.js";import"./UpdateTracking2D-DngEgnnG.js";import"./Utils-c54zZwBP.js";import"./BoundingBox-Da-i4FSJ.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-B7WLEiOB.js";import"./BufferObject-CkAyuNmV.js";import"./TileContainer-CYmMo6Q3.js";import"./WGLContainer-Bi62Ne1i.js";import"./ProgramTemplate-Dag7pEiF.js";import"./VertexArrayObject-CkOOqsmK.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexBuffer-BOYxJmdS.js";import"./vec3f32-WCVSSNPR.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-HUfCD0i2.js";import"./OptimizedFeature-BV9bW67H.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-pNSI9Fh7.js";import"./CIMSymbolHelper-D3l0pcDe.js";import"./BidiEngine-BvER9tXK.js";import"./labelPoint-C5vZ6qGF.js";import"./GeometryUtils-m27QYUXk.js";import"./rasterizingUtils-Dla0fjsD.js";import"./Rect-CUzevAry.js";import"./GraphShaderModule-CKVDbU9D.js";import"./ShaderBuilder-De9Inz3I.js";import"./utils-ItE9vM0u.js";import"./constants-BBnGEY1d.js";import"./streamLayerUtils-DFlbJ4P1.js";import"./QueueProcessor-DlflWNvs.js";import"./OverrideHelper-Dd_roQEA.js";import"./colorUtils-DgnZp-q5.js";import"./callExpressionWithFeature-BcrhHUkU.js";import"./quantizationUtils-Cv5HCpcD.js";import"./AttributeStore-CODRhNWt.js";import"./FeatureStoreQueryAdapter-BA3XsDRI.js";import"./queryUtils-DeVm81Zw.js";import"./timeSupport-QyVmT76e.js";import"./FeatureMetadata-BGymskA6.js";import"./normalizeUtilsSync-DRvaJiNq.js";import"./dehydratedFeatures-B_wUt2V2.js";const q=Symbol("isGeoRSSGraphicOrigin");var c;class x extends u{get[(c=q,b)](){return this.layer}constructor(r){super(),this[c]=!0,this.type="geo-rss",this.layer=r}get id(){return this.layer.id}}let n=class extends M(j){constructor(){super(...arguments),this._graphicsViewMap={},this.graphicsViews=[]}async hitTest(i,r){if(!this.graphicsViews.length)return null;const m=this.layer;return this.graphicsViews.reverse().flatMap(t=>t.hitTest(i)).map(t=>({type:"graphic",graphic:t,layer:m,mapPoint:i}))}update(i){if(this.graphicsViews)for(const r of this.graphicsViews)r.processUpdate(i)}attach(){this.addAttachHandles([p(()=>{var i;return(i=this.layer)==null?void 0:i.featureCollections},i=>{this._clear();const{layer:r}=this,m=new x(this.layer);for(const{popupInfo:t,featureSet:g,layerDefinition:d}of i){const e=S.fromJSON(g),y=new V(e.features),w=t?$.fromJSON(t):null;y.forEach(s=>{s.layer=r,s.sourceLayer=r,s.popupTemplate=w,s.origin=m});const f=d.drawingInfo,o=_(f.renderer),h=new O({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:y,renderer:o,container:new C(this.view.featuresTilingScheme)});this._graphicsViewMap[e.geometryType]=h,e.geometryType!=="polygon"||this.layer.polygonSymbol?e.geometryType!=="polyline"||this.layer.lineSymbol?e.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=o.symbol):this.layer.lineSymbol=o.symbol:this.layer.polygonSymbol=o.symbol,this.graphicsViews.push(h),this.container.addChild(h.container)}},a),p(()=>{var i;return(i=this.layer)==null?void 0:i.polygonSymbol},i=>{this._graphicsViewMap.polygon.renderer=new l({symbol:i})},a),p(()=>{var i;return(i=this.layer)==null?void 0:i.lineSymbol},i=>{this._graphicsViewMap.polyline.renderer=new l({symbol:i})},a),p(()=>{var i;return(i=this.layer)==null?void 0:i.pointSymbol},i=>{this._graphicsViewMap.point.renderer=new l({symbol:i})},a)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const i of this.graphicsViews)i.viewChange()}_clear(){this.container.removeAllChildren();for(const i of this.graphicsViews)i.destroy();this._graphicsViewMap={},this.graphicsViews.length=0}};n=v([T("esri.views.2d.layers.GeoRSSLayerView2D")],n);const qi=n;export{qi as default};
