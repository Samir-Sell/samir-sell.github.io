import{fL as f,cm as x}from"./index-7LVg-iY6.js";import{w as d,j as y}from"./operatorOffset-DmS9Jk0L.js";import{getSpatialReference as p,fromGeometry as G,toGeometry as u,fromGeometries as g}from"./jsonConverter-BKt79zJV.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-Bu0AKopz.js";import"./Envelope2D-DXBkavsi.js";import"./Point2D-AUu76-L_.js";import"./Transformation2D-481oZy9q.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function F(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:c="round",unit:r}=n,o=p(e);r&&o&&(t=f(t,r,o));const i=G(e),m=i.getSpatialReference();return u(d(i.getGeometry(),m,t,l[c],a,s),m)}function M(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:c="round",unit:r}=n,o=p(e);r&&o&&(t=f(t,r,o));const[i,m]=g(e);return y(i,m,t,l[c],a,s).map(j=>u(j,m)).filter(x)}export{F as execute,M as executeMany};
