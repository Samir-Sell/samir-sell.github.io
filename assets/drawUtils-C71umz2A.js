import{gi as b,bb as d,gj as P,gk as C,f1 as D,gl as v,f8 as E,gm as F,gn as q,go as z,gp as U,gq as G,gr as H}from"./index-7LVg-iY6.js";import{c as I}from"./GraphicManipulator-DIG-NXFq.js";function R(n,e,s,t){if(n.type==="point")return n.x+=e,n.y+=s,n.hasZ&&t!=null,n;if(n.type==="multipoint"){const r=n.points;for(let o=0;o<r.length;o++)r[o]=k(r[o],e,s,t);return n}if(n.type==="extent")return n.xmin+=e,n.xmax+=e,n.ymin+=s,n.ymax+=s,n;const i=n.type==="polyline"?n.curvePaths??n.paths:n.curveRings??n.rings,c=F(n);for(let r=0;r<i.length;r++){const o=i[r];for(let y=0;y<o.length;y++)o[y]=K(o[y],e,s,t)}return"paths"in n?c?n.curvePaths=i:n.paths=i:c?n.curveRings=i:n.rings=i,n}function Q(n,e,s,t,i){const c=n.clone();if(i){const{resolution:r}=t;R(c,e*r,-s*r)}else{const{dxMap:r,dyMap:o}=J(e,s,t);R(c,r,o)}return c}function J(n,e,s){const t=s.state.inverseTransform;return{dxMap:t[0]*n+t[2]*e,dyMap:t[1]*n+t[3]*e}}function k(n,e,s,t){return w(n,n[0]+e,n[1]+s,n[2]!=null&&t!=null?n[2]+t:void 0)}function K(n,e,s,t){const i=k(v(n),e,s,t);if(q(n))return i;if(z(n)){const[,o,y]=n.b;return{b:[i,[o[0]+e,o[1]+s],[y[0]+e,y[1]+s]]}}if(U(n)){const[,o]=n.c;return{c:[i,[o[0]+e,o[1]+s]]}}const[,c,...r]=n.a;return{a:[i,[c[0]+e,c[1]+s],...r]}}function S(n,e,s,t){if(n.type==="point"){const{x:u,y:f}=n,m=t?t[0]:u,l=t?t[1]:f,x=n.clone(),p=(u-m)*e+m,a=(f-l)*s+l;return x.x=p,x.y=a,x}if(n.type==="extent"){const{xmin:u,xmax:f,ymin:m,ymax:l}=n,x=t?t[0]:(u+f)/2,p=t?t[1]:(l+m)/2,a=n.clone();if(a.xmin=(u-x)*e+x,a.ymax=(l-p)*s+p,a.xmax=(f-x)*e+x,a.ymin=(m-p)*s+p,a.xmin>a.xmax){const h=a.xmin,M=a.xmax;a.xmin=M,a.xmax=h}if(a.ymin>a.ymax){const h=a.ymin,M=a.ymax;a.ymin=M,a.ymax=h}return a}let i=null;if(!t){i=b(n);const u=d(),f=P(u,i);if(!f)return n.clone();const[m,l,x,p]=f;t=[(m+x)/2,(l+p)/2]}const[c,r]=t;if(n.type==="multipoint"){const u=n.clone(),f=u.points;for(let m=0;m<f.length;m++){const l=f[m],[x,p]=l,a=(x-c)*e+c,h=(p-r)*s+r;f[m]=w(l,a,h,void 0)}return u.points=f,u}const o=n.clone();i??(i=b(n));const y=o.type==="polygon",g=y?o.curveRings??o.rings:o.curvePaths??o.paths;if(!t){const u=d(),f=P(u,g,!1,!1);if(!f)return o;t=C(f)}for(const u of g){let f=null;const m=y&&u.length>0&&D(v(u[0]),v(u.at(-1)));for(let l=0;l<u.length;l++){const x=u[l];u[l]=L(x,e,s,c,r,f),f=x}m&&(u[0]=[...v(u.at(-1))])}return o}function j(n,e,s,t,i){const[c,r,...o]=n;return[(c-t)*e+t,(r-i)*s+i,...o]}function L(n,e,s,t,i,c){if(q(n))return j(n,e,s,t,i);if(z(n)){const[T,Z,A]=n.b.map(B=>j(B,e,s,t,i));return{b:[T,Z,A]}}if(!c)return n;const r=v(c),o=U(n)?G(r,n):n,[y,g,u,f,m,l,x]=o.a,p=m??0,a=l??Math.hypot(y[0]-g[0],y[1]-g[1]),h=x??1,M=I(t,i,1,0,0,1,e,s);return H(r,{a:[[...y],[...g],u,f,p,a,h]},M)}function V(n,e,s,t,i,c){const r=Math.sqrt((s-n)*(s-n)+(t-e)*(t-e));return Math.sqrt((i-n)*(i-n)+(c-e)*(c-e))/r}function W(n,e,s,t=!1){const i=Math.atan2(e.y-s.y,e.x-s.x)-Math.atan2(n.y-s.y,n.x-s.x),c=Math.atan2(Math.sin(i),Math.cos(i));return t?c:E(c)}function w(n,e,s,t){const i=[e,s];return n.length>2&&i.push(t??n[2]),n.length>3&&i.push(n[3]),i}export{S as M,V as U,W as b,J as h,Q as x};
