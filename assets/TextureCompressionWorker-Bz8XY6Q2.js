import{_ as S,gV as b,jH as m}from"./index-DalZQxea.js";function R(){return T??(T=(async()=>{const t=await S(()=>import("./basis_encoder-j4FPjaUP.js"),[]),e=await t.default({locateFile:a=>b(`esri/libs/basisu/${a}`)});return e.initializeBasis(),e})()),T}let T;function X(){T=null}function M(){return y??(y=(async()=>await(await S(()=>import("./dxt_encoder-BWB8Wn-9.js"),[])).default({locateFile:e=>b(`esri/libs/dxtEncoder/${e}`)}))()),y}let y;function x(){y=null}let A,_,c=null,o=null;class w{constructor(e,a){this.internalFormat=e,this.compressedTexture=a}}function Y(){c=null,A=null,o=null,_=null,X(),x()}async function q(t){var a;let e;e=t.data instanceof ImageBitmap?I(t.data):O(t.data,t.width,t.height,t.components,t.needsFlip);try{if(t.hasS3TC){o||await D();const s=new Uint8Array(e.length);if(o!=null&&o.encode(e,t.width,t.height,t.preMultiplyAlpha,s)){const n=Q(s,!0),i=[s.buffer];return{result:new w((n==null?void 0:n.internalFormat)??null,(n==null?void 0:n.textureData)??null),transferList:i}}return{result:new w(null,null)}}if(t.hasETC){if(c||await B(),t.preMultiplyAlpha&&!o&&await D(),t.preMultiplyAlpha){const r=new Uint8ClampedArray(e.length);o==null||o.premultiply(new Uint8Array(e),t.width,t.height,r),e=r}const s=F(e,t.width,t.height,t.hasMipmap),n=s?U(s):null,i=((a=n==null?void 0:n.compressedTexture)==null?void 0:a.levels.map(r=>r.buffer))||[];return{result:new w((n==null?void 0:n.internalFormat)??null,(n==null?void 0:n.compressedTexture)??null),transferList:i}}return{result:new w(null,null)}}finally{e instanceof ImageBitmap&&e.close()}}async function B(){c||(c=await(A??(A=R())),A=null)}async function D(){o||(o=await(_??(_=M())),_=null)}function F(t,e,a,s,n=255,i=0,r=!1,u=!1){if(!c)return null;const l=new c.BasisEncoder;l.setPerceptual(!u),l.setCheckForAlpha(!0),l.setForceAlpha(!1),l.setRenormalize(u),l.setMipGen(s),l.setMipSRGB(!u),l.setCreateKTX2File(!0),l.setKTX2SRGBTransferFunc(!u),l.setQualityLevel(n),l.setCompressionLevel(i);const f=new Uint8Array(t.byteLength);l.setSliceSourceImage(0,new Uint8Array(t),e,a,r);const d=l.encode(f),h=new Uint8Array(f.buffer,0,d),p=new c.KTX2File(new Uint8Array(h));return p.isValid()?(l.delete(),h):(p.close(),p.delete(),l.delete(),null)}function U(t){if(!c)return new w(null,null);const e=new c.KTX2File(new Uint8Array(t));e.startTranscoding();const[a,s]=e.getHasAlpha()?[1,m.COMPRESSED_RGBA8_ETC2_EAC]:[0,m.COMPRESSED_RGB8_ETC2],n=e.getLevels(),i=[];for(let r=0;r<n;r++)i.push(new Uint8Array(e.getImageTranscodedSizeInBytes(r,0,0,a))),e.transcodeImage(i[r],r,0,0,a,0,-1,-1);return e.close(),e.delete(),{internalFormat:s,compressedTexture:{type:"compressed",levels:i}}}function I(t){const e=new OffscreenCanvas(t.width,t.height),a=e.getContext("2d");return a.drawImage(t,0,0),a.getImageData(0,0,e.width,e.height).data}function O(t,e,a,s,n){const i=new Uint8ClampedArray(t).subarray(0,e*a*s);if(!n)return i;const r=new Uint8ClampedArray(i.length),u=e*s;for(let l=0;l<a;l++){const f=l*u,d=(a-l-1)*u;r.set(i.subarray(f,f+u),d)}return r}const v=31,G=1,P=2,L=3,K=4,k=7,z=21,V=131072;function C(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const $=C("DXT1"),H=C("DXT3"),j=C("DXT5");function Q(t,e){const a=new Int32Array(t.buffer,t.byteOffset,v);let s,n;switch(a[z]){case $:s=8,n=m.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case H:s=16,n=m.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case j:s=16,n=m.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let i=1,r=a[K],u=a[L];(3&r||3&u)&&(r=r+3&-4,u=u+3&-4);const l=r,f=u;let d,h;a[P]&V&&e!==!1&&(i=Math.max(1,a[k]));let p=t.byteOffset+a[G]+4;const g=[];for(let E=0;E<i;++E)h=(r+3>>2)*(u+3>>2)*s,d=new Uint8Array(t.buffer,p,h),g.push(d),p+=h,r=Math.max(1,r>>1),u=Math.max(1,u>>1);return{textureData:{type:"compressed",levels:g},internalFormat:n,width:l,height:f}}export{w as TextureCompressionWorkerOutput,q as compress,F as compressRGBADataToKTX2,U as createTextureDataKTX2,Y as destroy,B as initializeBasisEncoder,D as initializeDXTEncoder};
