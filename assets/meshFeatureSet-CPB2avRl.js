import{o as y,g as f,cO as S,cb as d,ak as g,a5 as b}from"./index-Cv0-fPI4.js";import l from"./Mesh-Bk6GbOh4.js";import{n as w,i as F}from"./External-wo3PMdGo.js";import{s as M}from"./infoFor3D-dHKPbXlj.js";import{n as N,i as T}from"./meshFeatureAttributes-BesvSXfj.js";import"./axisAngleDegrees-DNNI3iFk.js";import"./quat-Ch0VBzF_.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-C4kAE2CT.js";import"./meshProperties-BrNWSC8G.js";import"./MeshLocalVertexSpace-0KGRSdMe.js";import"./MeshTransform-C4AyjZAz.js";import"./MeshVertexAttributes-DIbDYLF6.js";import"./meshVertexSpaceUtils-33Pp2MTB.js";import"./triangulationUtils-CmQUnx7x.js";import"./earcut-D9gy186-.js";import"./Indices-BYZ6tNTV.js";import"./plane-CMgcROBJ.js";import"./vectorStacks-CCph9NQh.js";import"./deduplicate-Dj2Gc9R2.js";import"./projectPointToVector-DKL5R6ed.js";import"./vertexSpaceConversion-BvpusJ0I.js";import"./spatialReferenceEllipsoidUtils-B9213FBR.js";import"./computeTranslationToOriginAndRotation-CCe0ibwp.js";import"./vec3-DHTLHD1_.js";import"./BufferView-DWNkXJgb.js";import"./vec4-DF5gJdUA.js";const $=()=>y.getLogger("esri.rest.support.meshFeatureSet");function st(e,o,t){const r=t.features;t.features=[],delete t.geometryType;const s=d.fromJSON(t);if(s.geometryType="mesh",!t.assetMaps)return s;const n=O(o,t.assetMaps),i=e.sourceSpatialReference??g.WGS84,m=t.globalIdFieldName,{outFields:a}=e,c=a!=null&&a.length>0?v(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=x(u,m,i,o,n);s.features.push(new b({geometry:p,attributes:c(u)}))}return s}function v(e){return({attributes:o})=>{if(!o)return{};if(!e)return o;for(const t in o)e.has(t)||delete o[t];return o}}function x(e,o,t,r,s){const n=e.attributes[o],i=s.get(n);if(i==null||!e.geometry)return null;const m=N(e.attributes,t,r.transformFieldRoles),a=S.fromJSON(e.geometry);a.spatialReference=t;const c=T(e.attributes,r.transformFieldRoles),u=t.isGeographic?"local":"georeferenced",p=R(i);return p?l.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):l.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}function O(e,o){const t=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=M(i,e.supportedFormats);if(!p){$().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const h=f(t,s,()=>({files:new Map}));f(h.files,n,()=>({name:n,type:i,mimeType:p,status:E(c),parts:[]})).parts[u]={hash:m,url:a}}return t}function R(e){const o=Array.from(e.files.values()),t=new Array;for(const r of o){if(r.status!==2)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new w(n.url,n.hash))}t.push(new F(r.name,r.mimeType,s))}return{type:"service",assets:t}}function E(e){switch(e){case"COMPLETED":case"SUBMITTED":return 2;case"INPROGRESS":return 1;default:return 0}}export{O as assetMapFromAssetMapsJSON,x as extractMesh,st as meshFeatureSetFromJSON};
