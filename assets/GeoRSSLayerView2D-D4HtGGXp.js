import{j4 as u,j5 as b,dc as p,dd as a,c5 as S,O as V,d7 as $,d6 as _,j6 as l,D as v,Z as T}from"./index-DalZQxea.js";import{b as M}from"./LayerView2D-Bx5qWtjs.js";import{i as C}from"./GraphicContainer-BlSj2uZB.js";import{O}from"./GraphicsView2D-Ctn_ucfv.js";import{d as j}from"./LayerView-D0BmErtM.js";import"./Container-DgBtZZgc.js";import"./layerViewUtils-BaP6ELkx.js";import"./AGraphicContainer-afUsb7gn.js";import"./TechniqueInstance-D6f_LGy1.js";import"./memoryEstimations-8aoGHWgf.js";import"./UpdateTracking2D-B8KUrR17.js";import"./Utils-D70pyQOT.js";import"./BoundingBox-D30L3Gvt.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-vVgCufsi.js";import"./BufferObject-PzUDq_hb.js";import"./TileContainer-BT6lmSqg.js";import"./WGLContainer-BtqWFZDN.js";import"./ProgramTemplate-D1A-fbwY.js";import"./VertexArrayObject-DtjwKQ5C.js";import"./VertexAttributeLocations-BfZbt_DV.js";import"./VertexBuffer-C3yWAO3V.js";import"./vec3f32-WCVSSNPR.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-BmwuvCkf.js";import"./OptimizedFeature-CIbaylOR.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-B3B2gwM3.js";import"./CIMSymbolHelper-hICFpEiq.js";import"./BidiEngine-BvER9tXK.js";import"./labelPoint-Cxwr-WO2.js";import"./GeometryUtils-BvKSmYie.js";import"./rasterizingUtils-B16sHWiq.js";import"./Rect-CUzevAry.js";import"./GraphShaderModule-DHLQD9pP.js";import"./ShaderBuilder-BqcRlQpm.js";import"./utils-Bj8iihfG.js";import"./constants-BBnGEY1d.js";import"./streamLayerUtils-DFlbJ4P1.js";import"./QueueProcessor-DZuEN6N2.js";import"./OverrideHelper-Duuf_CmD.js";import"./colorUtils-CuYxSYRB.js";import"./callExpressionWithFeature-Cb2IvCSY.js";import"./quantizationUtils-Cg8aT734.js";import"./AttributeStore-Dh2D76Aq.js";import"./FeatureStoreQueryAdapter-DMZkEvLi.js";import"./queryUtils-C0kkxnUU.js";import"./timeSupport-DE744COr.js";import"./FeatureMetadata-CJzVmzzu.js";import"./normalizeUtilsSync-DLB-7fxp.js";import"./dehydratedFeatures-DhqaXmFY.js";const q=Symbol("isGeoRSSGraphicOrigin");var c;class x extends u{get[(c=q,b)](){return this.layer}constructor(r){super(),this[c]=!0,this.type="geo-rss",this.layer=r}get id(){return this.layer.id}}let n=class extends M(j){constructor(){super(...arguments),this._graphicsViewMap={},this.graphicsViews=[]}async hitTest(i,r){if(!this.graphicsViews.length)return null;const m=this.layer;return this.graphicsViews.reverse().flatMap(t=>t.hitTest(i)).map(t=>({type:"graphic",graphic:t,layer:m,mapPoint:i}))}update(i){if(this.graphicsViews)for(const r of this.graphicsViews)r.processUpdate(i)}attach(){this.addAttachHandles([p(()=>{var i;return(i=this.layer)==null?void 0:i.featureCollections},i=>{this._clear();const{layer:r}=this,m=new x(this.layer);for(const{popupInfo:t,featureSet:g,layerDefinition:d}of i){const e=S.fromJSON(g),y=new V(e.features),w=t?$.fromJSON(t):null;y.forEach(s=>{s.layer=r,s.sourceLayer=r,s.popupTemplate=w,s.origin=m});const f=d.drawingInfo,o=_(f.renderer),h=new O({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:y,renderer:o,container:new C(this.view.featuresTilingScheme)});this._graphicsViewMap[e.geometryType]=h,e.geometryType!=="polygon"||this.layer.polygonSymbol?e.geometryType!=="polyline"||this.layer.lineSymbol?e.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=o.symbol):this.layer.lineSymbol=o.symbol:this.layer.polygonSymbol=o.symbol,this.graphicsViews.push(h),this.container.addChild(h.container)}},a),p(()=>{var i;return(i=this.layer)==null?void 0:i.polygonSymbol},i=>{this._graphicsViewMap.polygon.renderer=new l({symbol:i})},a),p(()=>{var i;return(i=this.layer)==null?void 0:i.lineSymbol},i=>{this._graphicsViewMap.polyline.renderer=new l({symbol:i})},a),p(()=>{var i;return(i=this.layer)==null?void 0:i.pointSymbol},i=>{this._graphicsViewMap.point.renderer=new l({symbol:i})},a)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const i of this.graphicsViews)i.viewChange()}_clear(){this.container.removeAllChildren();for(const i of this.graphicsViews)i.destroy();this._graphicsViewMap={},this.graphicsViews.length=0}};n=v([T("esri.views.2d.layers.GeoRSSLayerView2D")],n);const qi=n;export{qi as default};
