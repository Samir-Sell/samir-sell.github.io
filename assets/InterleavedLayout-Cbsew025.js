import{p as D,y as o,r as d,b as m,h as H,o as a,U as y,m as W,T as c,F as w,d as E,x as g,E as T,A as v,g as b,a as k,f as l,B as $,I as A,w as N,z as L,C as B,J as M,j as S,L as U,M as C,N as I,v as O,s as Q,O as Y,V as P,S as V,k as j,q,D as J,G as K,H as X,K as Z,P as tt,Q as et,R as rt,W as st}from"./BufferView-CJ8xV7yf.js";import{e as F}from"./types-BKo2foNY.js";import{ac as u}from"./index-DalZQxea.js";import{t as it}from"./VertexElementDescriptor-BLyltQyJ.js";import{n as nt}from"./VertexAttributeLocations-BfZbt_DV.js";function ut(i,t=0){const e=i.stride;return Array.from(i.fields.keys()).map(r=>{var _;const s=i.fields.get(r),n=s.constructor.ElementCount,h=ht(s.constructor.ElementType),G=s.offset,x=((_=s.optional)==null?void 0:_.glNormalized)??!1;return new it(r,n,h,G,e,x,t)})}function ht(i){switch(i){case"u8":return u.UNSIGNED_BYTE;case"u16":return u.UNSIGNED_SHORT;case"u32":return u.UNSIGNED_INT;case"i8":return u.BYTE;case"i16":return u.SHORT;case"i32":return u.INT;case"f16":return u.HALF_FLOAT;case"f32":return u.FLOAT;default:throw new Error("BufferType not supported in WebGL")}}class f{constructor(t,e){this.layout=t,this.buffer=typeof e=="number"?new ArrayBuffer(e*t.stride):e;for(const r of t.fields.keys()){const s=t.fields.get(r);this[r]=new s.constructor(this.buffer,s.offset,this.stride)}}get stride(){return this.layout.stride}get count(){return this.buffer.byteLength/this.stride}get byteLength(){return this.buffer.byteLength}getField(t,e){const r=this[t];return r&&r.elementCount===e.ElementCount&&r.elementType===e.ElementType?r:null}slice(t,e){return new f(this.layout,this.buffer.slice(t*this.stride,e*this.stride))}copyFrom(t,e=0,r=0,s=t.count){const n=this.stride;if(n%4==0){const h=new Uint32Array(t.buffer,e*n,s*n/4);new Uint32Array(this.buffer,r*n,s*n/4).set(h)}else{const h=new Uint8Array(t.buffer,e*n,s*n);new Uint8Array(this.buffer,r*n,s*n).set(h)}return this}get usedMemory(){return this.byteLength}dispose(){}}class p{constructor(t){this._stride=0,this._fields=new Map,t&&(this._stride=t.stride,t.fields.forEach(e=>this._fields.set(e[0],{...e[1],constructor:ft(e[1].constructor)})))}freeze(){return this}get locations(){return nt(ut(this))}vec2f16(t,e){return this._appendField(t,d?D:o,e),this}vec2f(t,e){return this._appendField(t,o,e),this}vec2f64(t,e){return this._appendField(t,m,e),this}vec3f16(t,e){return this._appendField(t,d?H:a,e),this}vec3f(t,e){return this._appendField(t,a,e),this}vec3f64(t,e){return this._appendField(t,y,e),this}vec4f16(t,e){return this._appendField(t,d?W:c,e),this}vec4f(t,e){return this._appendField(t,c,e),this}vec4f64(t,e){return this._appendField(t,w,e),this}mat3f(t,e){return this._appendField(t,E,e),this}mat3f64(t,e){return this._appendField(t,g,e),this}mat4f(t,e){return this._appendField(t,T,e),this}mat4f64(t,e){return this._appendField(t,v,e),this}vec4u8(t,e){return this._appendField(t,b,e),this}f16(t,e){return this._appendField(t,d?k:l,e),this}f32(t,e){return this._appendField(t,l,e),this}f64(t,e){return this._appendField(t,$,e),this}u8(t,e){return this._appendField(t,A,e),this}u16(t,e){return this._appendField(t,N,e),this}i8(t,e){return this._appendField(t,L,e),this}vec2i8(t,e){return this._appendField(t,B,e),this}vec2i16(t,e){return this._appendField(t,M,e),this}vec2u8(t,e){return this._appendField(t,S,e),this}vec2u16(t,e){return this._appendField(t,U,e),this}vec4u16(t,e){return this._appendField(t,C,e),this}vec4i16(t,e){return this._appendField(t,I,e),this}u32(t,e){return this._appendField(t,O,e),this}_appendField(t,e,r){this._fields.has(t)&&Q(!1,`${t} already added to vertex buffer layout`);const s=e.ElementCount*F(e.ElementType),n=this._stride;this._fields.set(t,{constructor:e,size:s,offset:n,optional:r}),this._alignFields()}_alignFields(){let t=0,e=1;this._fields.forEach(r=>{const s=F(r.constructor.ElementType);t=Math.floor((t+s-1)/s)*s,r.offset=t,t+=r.size,e=Math.max(e,s)}),t=Math.floor((t+e-1)/e)*e,this._stride=t}createBuffer(t){return new f(this,t)}createView(t){return new f(this,t)}clone(){const t=new p;return t._stride=this._stride,t._fields=new Map,this._fields.forEach((e,r)=>t._fields.set(r,e)),t.BufferType=this.BufferType,t}get stride(){return this._stride}get fields(){return this._fields}}function _t(){return new p}class Ft{constructor(t){this.fields=new Array,t.fields.forEach((e,r)=>{const s={...e,constructor:R(e.constructor)};this.fields.push([r,s])}),this.stride=t.stride}}const dt=[l,o,a,c,E,T,$,m,y,w,g,v,A,S,Y,b,N,U,P,C,O,V,j,q,L,B,J,K,X,M,Z,I,tt,et,rt,st];function R(i){return`${i.ElementType}_${i.ElementCount}`}function ft(i){return z.get(i)}const z=new Map;dt.forEach(i=>z.set(R(i),i));export{p as P,_t as Q,Ft as R,ut as t};
