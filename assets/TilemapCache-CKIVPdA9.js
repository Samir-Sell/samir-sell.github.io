import{eh as z,a2 as q,H as T,b as p,cp as L,bK as S,dc as x,dd as P,V as A,T as C,i$ as M,dt as I,i0 as U,dh as j,be as k,u as H,fJ as R,Z as y,a0 as b,a1 as F}from"./index-Cv0-fPI4.js";import{i as J}from"./memoryEstimations-djtQljaD.js";function K(i,e=!1){return i<=z?e?new Array(i).fill(0):new Array(i):new Uint32Array(i)}class g{constructor(e){E(e);const{location:a,data:l}=e;this.location=Object.freeze(q(a));const t=this.location.width,s=this.location.height;let n=!0,o=!0;const h=Math.ceil(t*s/32),r=K(h);let c=0;for(let f=0;f<l.length;f++){const m=f%32;l[f]?(o=!1,r[c]|=1<<m):n=!1,m===31&&++c}o?(this._availability="unavailable",this.byteSize=40):n?(this._availability="available",this.byteSize=40):(this._availability=r,this.byteSize=40+J(r))}getAvailability(e,a){if(this._availability==="unavailable"||this._availability==="available")return this._availability;const l=(e-this.location.top)*this.location.width+(a-this.location.left),t=l%32,s=l>>5,n=this._availability;return s<0||s>n.length?"unknown":n[s]&1<<t?"available":"unavailable"}static fromDefinition(e,a){const l=e.service.request||T,{row:t,col:s,width:n,height:o}=e,h={query:{f:"json"}};return a=a?{...h,...a}:h,l(N(e),a).then(r=>r.data).catch(r=>{var c;if(((c=r==null?void 0:r.details)==null?void 0:c.httpStatus)===422)return{location:{top:t,left:s,width:n,height:o},valid:!0,data:new Array(n*o).fill(0)};throw r}).then(r=>{if(r.location&&(r.location.top!==t||r.location.left!==s||r.location.width!==n||r.location.height!==o))throw new p("tilemap:location-mismatch","Tilemap response for different location than requested",{response:r,definition:{top:t,left:s,width:n,height:o}});return g.fromJSON(r)})}static fromJSON(e){return Object.freeze(new g(e))}}function D(i){return`${i.level}/${i.row}/${i.col}/${i.width}/${i.height}`}function N(i){var l;let e;if((l=i.service.tileServers)!=null&&l.length){const t=i.service.tileServers;e=`${t&&t.length?t[i.row%t.length]:i.service.url}/tilemap/${i.level}/${i.row}/${i.col}/${i.width}/${i.height}`}else e=`${i.service.url}/tilemap/${i.level}/${i.row}/${i.col}/${i.width}/${i.height}`;const a=i.service.query;return a&&(e=`${e}?${a}`),e}function E(i){if(!(i!=null&&i.location))throw new p("tilemap:missing-location","Location missing from tilemap response");if(i.valid===!1)throw new p("tilemap:invalid","Tilemap response was marked as invalid");if(!i.data)throw new p("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(i.data))throw new p("tilemap:data-mismatch","Data must be an array of numbers");if(i.data.length!==i.location.width*i.location.height)throw new p("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}var d;function O(i,e,a){return new p("tile-map:tile-unavailable","Tile is not available",{level:i,row:e,col:a})}var u;let v=(u=class extends L{constructor(e){super(e),this._pendingTilemapRequests={},this.request=T,this.size=32,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new S(2097152),this.addHandles(x(()=>{const{layer:e}=this;return[e==null?void 0:e.parsedUrl,e==null?void 0:e.tileServers,e==null?void 0:e.apiKey,e==null?void 0:e.customParameters]},()=>this._initializeTilemapDefinition(),P))}get effectiveMinLOD(){return this.minLOD??this.layer.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.layer.tileInfo.lods[this.layer.tileInfo.lods.length-1].level}getAvailability(e,a,l){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return"unavailable";const t=this._tilemapFromCache(e,a,l,this._tmpTilemapDefinition);return t?t.getAvailability(a,l):"unknown"}fetchAvailability(e,a,l,t){return!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD?Promise.reject(O(e,a,l)):this._fetchTilemap(e,a,l,t).catch(s=>s).then(s=>{if(s instanceof g){const n=s.getAvailability(a,l);if(n==="unavailable")throw O(e,a,l);return n}if(A(s))throw s;return"unknown"})}fetchAvailabilityUpsample(e,a,l,t,s){t.level=e,t.row=a,t.col=l;const n=this.layer.tileInfo;n.updateTileInfo(t);const o=this.fetchAvailability(e,a,l,s).catch(h=>{if(A(h))throw h;if(n.upsampleTile(t))return this.fetchAvailabilityUpsample(t.level,t.row,t.col,t,s);throw h});return this._fetchAvailabilityUpsamplePrefetch(e,a,l,s,o),o}async _fetchAvailabilityUpsamplePrefetch(e,a,l,t,s){if(!this._prefetchingEnabled)return;const n=`prefetch-${e}-${a}-${l}`;if(this.hasHandles(n))return;const o=new AbortController;s.then(()=>o.abort(),()=>o.abort());let h=!1;const r=C(()=>{h||(h=!0,o.abort())});if(this.addHandles(r,n),await M(10,o.signal).catch(()=>{}),h||(h=!0,this.removeHandles(n)),I(o))return;const c=new U(e,a,l),f={...t,signal:o.signal},m=this.layer.tileInfo;for(let w=0;d._prefetches.length<d._maxPrefetch&&m.upsampleTile(c);++w){const _=this.fetchAvailability(c.level,c.row,c.col,f);d._prefetches.push(_);const $=()=>{d._prefetches.removeUnordered(_)};_.then($,$)}}static cleanupTilemapCache(){this._prefetches.prune()}_fetchTilemap(e,a,l,t){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return Promise.reject(new p("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const s=this._tmpTilemapDefinition,n=this._tilemapFromCache(e,a,l,s);if(n)return Promise.resolve(n);const o=t==null?void 0:t.signal;return t={...t,signal:null},new Promise((h,r)=>{k(o,()=>r(H()));const c=D(s);let f=this._pendingTilemapRequests[c];if(!f){f=g.fromDefinition(s,t).then(w=>(this._tilemapCache.put(c,w,w.byteSize),w));const m=()=>{delete this._pendingTilemapRequests[c]};this._pendingTilemapRequests[c]=f,f.then(m,m)}f.then(h,r)})}_initializeTilemapDefinition(){var t;if(!this.layer.parsedUrl)return;const{parsedUrl:e,apiKey:a,customParameters:l}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:R({...e.query,...l,token:a??((t=e.query)==null?void 0:t.token)}),tileServers:this.layer.tileServers,request:this.request},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,a,l,t){t.level=e,t.row=a-a%this.size,t.col=l-l%this.size;const s=D(t);return this._tilemapCache.get(s)}get test(){}},d=u,u._maxPrefetch=4,u._prefetches=new j({initialSize:d._maxPrefetch}),u);y([b({constructOnly:!0})],v.prototype,"layer",void 0),y([b({constructOnly:!0})],v.prototype,"minLOD",void 0),y([b({constructOnly:!0})],v.prototype,"maxLOD",void 0),y([b({constructOnly:!0})],v.prototype,"request",void 0),y([b({constructOnly:!0})],v.prototype,"size",void 0),v=d=y([F("esri.layers.support.TilemapCache")],v);export{v as j};
