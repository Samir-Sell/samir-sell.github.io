import{av as y,aw as f,ax as R,ay as d,az as m}from"./index-MBf2dn39.js";class u{constructor(t){this.geometry=t,this.spatialReference=t.spatialReference}export(){return this._exporter(this.coordinates,this.spatialReference)}clone(t){const n=new u(this.geometry);return n.spatialReference=this.spatialReference,n.coordinates=t??this.coordinates.map(s=>s.clone()),n._exporter=this._exporter,n}async project(t,n){if(this.spatialReference.equals(t))return this.clone();await y([{source:this.spatialReference,dest:t}],{signal:n});const s=new f({spatialReference:this.spatialReference,points:this.coordinates.map(p=>[p.x,p.y])}),o=R(s,t);if(!o)return null;const r=this.coordinates.map((p,i)=>{const l=p.clone(),a=o.points[i];return l.x=a[0],l.y=a[1],l}),e=this.clone(r);return e.spatialReference=t,e}static fromGeometry(t){const n=new u(t);if(t instanceof u)return n.coordinates=t.coordinates.map(s=>s.clone()),n._exporter=(s,o)=>{const r=t.clone(s);return r.spatialReference=o,r},n;switch(t.type){case"point":{const s=t,{hasZ:o,hasM:r}=s;return n.coordinates=o&&r?[new c(s.x,s.y,s.z,s.m)]:o?[new c(s.x,s.y,s.z)]:r?[new c(s.x,s.y,null,s.m)]:[new c(s.x,s.y)],n._exporter=(e,p)=>t.hasM?new m(e[0].x,e[0].y,e[0].z,e[0].m,p):new m(e[0].x,e[0].y,e[0].z,p),n}case"multipoint":{const s=t,{hasZ:o,hasM:r}=s;return n.coordinates=o&&r?s.points.map(e=>new c(e[0],e[1],e[2],e[3])):o?s.points.map(e=>new c(e[0],e[1],e[2])):r?s.points.map(e=>new c(e[0],e[1],null,e[2])):s.points.map(e=>new c(e[0],e[1])),n._exporter=(e,p)=>t.hasM?new f({points:e.map(i=>[i.x,i.y,i.z??0,i.m??0]),hasZ:!0,hasM:!0,spatialReference:p}):new f({points:e.map(i=>[i.x,i.y,i.z??0]),spatialReference:p}),n}case"polyline":{const s=t,o=[],r=[],{hasZ:e,hasM:p}=t;let i=0;for(const l of s.paths)if(r.push([i,i+l.length]),i+=l.length,e&&p)for(const a of l)o.push(new c(a[0],a[1],a[2],a[3]));else if(e)for(const a of l)o.push(new c(a[0],a[1],a[2]));else if(p)for(const a of l)o.push(new c(a[0],a[1],null,a[2]));else for(const a of l)o.push(new c(a[0],a[1]));return n.coordinates=o,n._exporter=(l,a)=>{const w=t.hasM?l.map(h=>[h.x,h.y,h.z??0,h.m??0]):l.map(h=>[h.x,h.y,h.z??0]),x=r.map(h=>w.slice(h[0],h[1]));return new d({paths:x,hasM:t.hasM,hasZ:!0,spatialReference:a})},n}}}}class c{constructor(t,n,s=null,o=null,r=null,e=null){this.x=t,this.y=n,this.z=s,this.m=o,this.tile=r,this.elevationTile=e}clone(){return new c(this.x,this.y,this.z,this.m)}}export{u as r};
