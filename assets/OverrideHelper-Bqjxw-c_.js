import{aN as M,aO as d,aP as C,a2 as u,aQ as I,aR as x,aS as O,aT as k,aU as S,aV as h,aW as N}from"./index-MBf2dn39.js";import{i as P}from"./colorUtils-CkAZgRni.js";import T from"./callExpressionWithFeature-BRfG9Jrf.js";import"./quantizationUtils-BEptSagi.js";const g=y=>{if(!y)return[0,0,0,0];const{r:e,g:r,b:t,a:i}=y;return[e,r,t,255*i]},a=class a{static findApplicableOverrides(e,r,t){if(e&&r){if(e.primitiveName){let i=!1;for(const s of t)if(s.primitiveName===e.primitiveName){i=!0;break}if(!i)for(const s of r)s.primitiveName===e.primitiveName&&t.push(s)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const i of e.effects)a.findApplicableOverrides(i,r,t);if(e.symbolLayers)for(const i of e.symbolLayers)a.findApplicableOverrides(i,r,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const i of e.effects)a.findApplicableOverrides(i,r,t);if(e.markerPlacement&&a.findApplicableOverrides(e.markerPlacement,r,t),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const i of e.markerGraphics)a.findApplicableOverrides(i,r,t),a.findApplicableOverrides(i.symbol,r,t)}else e.type==="CIMCharacterMarker"?a.findApplicableOverrides(e.symbol,r,t):e.type==="CIMHatchFill"?a.findApplicableOverrides(e.lineSymbol,r,t):e.type==="CIMPictureMarker"&&a.findApplicableOverrides(e.animatedSymbolProperties,r,t)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&M(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const t=d(e),i=e.primitiveName,s=[];for(const o of r)o.primitiveName===i&&s.push(d(o));return{type:"cim-effect-param",effect:t,overrides:C(s)}}static async resolveSymbolOverrides(e,r,t,i,s,o,c){if(!(e!=null&&e.symbol))return null;let{symbol:l,primitiveOverrides:n}=e;const m=!!n;if(!m&&!i)return l;l=u(l),n=u(n);let v=!0;if(r||(r={attributes:{}},v=!1),m){if(v||(n=n.filter(f=>{var p;return!((p=f.valueExpressionInfo)!=null&&p.expression.includes("$feature"))})),c||(n=n.filter(f=>{var p;return!((p=f.valueExpressionInfo)!=null&&p.expression.includes("$view"))})),n.length>0){const f=I(r.attributes),p={spatialReference:t,fields:f,geometryType:s};await a.createRenderExpressions(n,p),a.evaluateOverrides(n,r,s??"esriGeometryPoint",o,c,new x(f))}a.applyOverrides(l,n)}return i&&a.applyDictionaryTextOverrides(l,r,i,null),l}static async createRenderExpressions(e,r){const t=[];for(const i of e){const s=i.valueExpressionInfo;if(!s||a._expressionToRenderExpression.has(s.expression))continue;const o=O(s.expression,r.spatialReference);t.push(o),o.then(c=>a._expressionToRenderExpression.set(s.expression,c))}t.length>0&&await Promise.all(t)}static evaluateOverrides(e,r,t,i,s,o){const c={$view:{scale:s==null?void 0:s.scale}};for(const l of e){l.value&&typeof l.value=="object"&&P(l.value)&&(l.propertyName==="Color"||l.propertyName==="StrokeColor")&&(l.value=g(l.value));const n=l.valueExpressionInfo;if(!n)continue;const m=a._expressionToRenderExpression.get(n.expression);m&&(l.value=T(m,r,c,t,o,i))}}static applyDictionaryTextOverrides(e,r,t,i,s="Normal"){if(e!=null&&e.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const o=e.symbolLayers;if(!o)return;for(const c of o)c&&c.type==="CIMVectorMarker"&&a.applyDictionaryTextOverrides(c,r,t,i,e.type==="CIMTextSymbol"?e.textCase:s)}break;case"CIMVectorMarker":{const o=e.markerGraphics;if(!o)return;for(const c of o)c&&a.applyDictionaryTextOverrides(c,r,t,i)}break;case"CIMMarkerGraphic":{const o=e.textString;if(o&&o.includes("[")){const c=k(o,t);e.textString=S(r,c,i,s)}}}}static applyOverrides(e,r,t,i){if(e.primitiveName){for(const s of r)if(s.primitiveName===e.primitiveName){const o=h(s.propertyName);if(i&&i.push({cim:e,nocapPropertyName:o,value:e[o]}),t){let c=!1;for(const l of t)l.primitiveName===e.primitiveName&&(c=!0);c||t.push(s)}s.value!=null&&(e[o]=s.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)a.applyOverrides(s,r,t,i);if(e.symbolLayers)for(const s of e.symbolLayers)a.applyOverrides(s,r,t,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const s of e.effects)a.applyOverrides(s,r,t,i);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const s of e.markerGraphics)a.applyOverrides(s,r,t,i),a.applyOverrides(s.symbol,r,t,i)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const t of e)t.value!==void 0&&(r+=`${t.primitiveName}${t.propertyName}${JSON.stringify(t.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(t=>Number(t));if(e==="Color"){const t=new N(r).toRgba();return t[3]*=255,t}return r}};a._expressionToRenderExpression=new Map;let b=a;export{b as OverrideHelper};
