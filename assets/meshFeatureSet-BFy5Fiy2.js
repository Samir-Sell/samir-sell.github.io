import{o as y,g as f,cO as S,cb as d,ak as g,a5 as b}from"./index-MBf2dn39.js";import l from"./Mesh-srXC8xZ9.js";import{n as w,i as F}from"./External-DuUvxlT6.js";import{s as M}from"./infoFor3D-dHKPbXlj.js";import{n as N,i as T}from"./meshFeatureAttributes-Y_-dCRY5.js";import"./axisAngleDegrees-C2J-WygS.js";import"./quat-CJ8rynPP.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-DEcaDzp_.js";import"./meshProperties-BrNWSC8G.js";import"./MeshLocalVertexSpace-DcYRyZ9_.js";import"./MeshTransform-CGLXqTrq.js";import"./MeshVertexAttributes-BF_wQqia.js";import"./meshVertexSpaceUtils-z3D1YUNL.js";import"./triangulationUtils-B58Wv85K.js";import"./earcut-D9gy186-.js";import"./Indices-BpMW4q8F.js";import"./plane-DE-0I0cS.js";import"./vectorStacks-F901fm2H.js";import"./deduplicate-B3pGRzgF.js";import"./projectPointToVector-B6nSm9iu.js";import"./vertexSpaceConversion-Bc3lS1yU.js";import"./spatialReferenceEllipsoidUtils-mSxEU2KY.js";import"./computeTranslationToOriginAndRotation-BIyM3rah.js";import"./vec3-0XSdc2yf.js";import"./BufferView-DbmJqxmi.js";import"./vec4-vZoWQHkE.js";const $=()=>y.getLogger("esri.rest.support.meshFeatureSet");function st(e,o,t){const r=t.features;t.features=[],delete t.geometryType;const s=d.fromJSON(t);if(s.geometryType="mesh",!t.assetMaps)return s;const n=O(o,t.assetMaps),i=e.sourceSpatialReference??g.WGS84,m=t.globalIdFieldName,{outFields:a}=e,c=a!=null&&a.length>0?v(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=x(u,m,i,o,n);s.features.push(new b({geometry:p,attributes:c(u)}))}return s}function v(e){return({attributes:o})=>{if(!o)return{};if(!e)return o;for(const t in o)e.has(t)||delete o[t];return o}}function x(e,o,t,r,s){const n=e.attributes[o],i=s.get(n);if(i==null||!e.geometry)return null;const m=N(e.attributes,t,r.transformFieldRoles),a=S.fromJSON(e.geometry);a.spatialReference=t;const c=T(e.attributes,r.transformFieldRoles),u=t.isGeographic?"local":"georeferenced",p=R(i);return p?l.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):l.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}function O(e,o){const t=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=M(i,e.supportedFormats);if(!p){$().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const h=f(t,s,()=>({files:new Map}));f(h.files,n,()=>({name:n,type:i,mimeType:p,status:E(c),parts:[]})).parts[u]={hash:m,url:a}}return t}function R(e){const o=Array.from(e.files.values()),t=new Array;for(const r of o){if(r.status!==2)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new w(n.url,n.hash))}t.push(new F(r.name,r.mimeType,s))}return{type:"service",assets:t}}function E(e){switch(e){case"COMPLETED":case"SUBMITTED":return 2;case"INPROGRESS":return 1;default:return 0}}export{O as assetMapFromAssetMapsJSON,x as extractMesh,st as meshFeatureSetFromJSON};
