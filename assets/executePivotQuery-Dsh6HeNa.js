import{I as m,P as u,H as c,bt as p,c6 as f,c5 as y}from"./index-DalZQxea.js";import{t as v,r as P}from"./query-Du-7TXIe.js";import{v as g}from"./PivotQuery-BLbd2e7D.js";import"./pbfQueryUtils-By0gJHqN.js";import"./pbf-CRLP2FQI.js";import"./memoryEstimations-8aoGHWgf.js";import"./OptimizedFeature-CIbaylOR.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-DYx6kMwl.js";function l(r){const t=P(r),o=t.outPivots;if(o!=null&&o.length){for(const i of o)i.pivotType==="Pivot"&&i.pivotParameters.outStatistic?i.pivotParameters.outStatistic=JSON.stringify(i.pivotParameters.outStatistic):i.pivotType==="Unpivot"&&(i.unPivotParameters.sourceFields=i.unPivotParameters.sourceFields.join(","));t.outPivots=JSON.stringify(o)}return t}async function S(r,t,o){return await q(r,t,o)}async function q(r,t,o={}){const i=typeof r=="string"?m(r):r,n=t.geometry?[t.geometry]:[],e=await u(n,null,{signal:o.signal}),a=e==null?void 0:e[0];a!=null&&((t=t.clone()).geometry=a);const s=v({...i.query,f:"json",...l(t)});return c(p(i.path,"queryPivot"),{...o,query:{...s,...o.query}})}async function F(r,t,o){const i=f(r),n={...o},{data:e}=await S(i,g.from(t),n);return y.fromJSON(e)}export{F as executePivotQuery};
